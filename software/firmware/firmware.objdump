
firmware.elf:     file format elf32-littlenios2
firmware.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000022dc memsz 0x000022dc flags r-x
    LOAD off    0x000032fc vaddr 0x0000a2fc paddr 0x0000a5d0 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000038a4 vaddr 0x0000a8a4 paddr 0x0000a8a4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000035d0  2**0
                  CONTENTS
  2 .text         000020f8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001e4  0000a118  0000a118  00003118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  0000a2fc  0000a5d0  000032fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0000a8a4  0000a8a4  000038a4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000a8b4  0000a8b4  000035d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000510  00000000  00000000  000035f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000073bd  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025f1  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002b3f  00000000  00000000  0000d4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a04  00000000  00000000  0000fff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016c0  00000000  00000000  000109fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015da  00000000  00000000  000120bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00013698  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  000136a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00014fe6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00014fe9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00014ff5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00014ff6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00014ff7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00015002  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001500d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00015018  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  0001501e  2**0
                  CONTENTS, READONLY
 26 .jdi          00005062  00000000  00000000  0001503c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00036e98  00000000  00000000  0001a09e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000a118 l    d  .rodata	00000000 .rodata
0000a2fc l    d  .rwdata	00000000 .rwdata
0000a8a4 l    d  .bss	00000000 .bss
0000a8b4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../firmware_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000856c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a2fc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008e0c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008f74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000090b0 l     F .text	00000034 alt_dev_reg
0000a3dc l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00009390 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000094c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000094f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000096b0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009810 l     F .text	0000003c alt_get_errno
0000984c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008ef8 g     F .text	0000007c alt_main
000084bc g     F .text	00000080 _puts_r
0000a5d0 g       *ABS*	00000000 __flash_rwdata_start
00008470 g     F .text	0000004c printf
0000824c g     F .text	000001ac blake2s_test_RFC_7693
00009b18 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a8a4 g     O .bss	00000004 errno
0000a8ac g     O .bss	00000004 alt_argv
000125b0 g       *ABS*	00000000 _gp
0000805c g     F .text	000001f0 klein_test
0000a430 g     O .rwdata	00000180 alt_fd_list
00009b3c g     F .text	00000090 alt_find_dev
00009794 g     F .text	0000007c alt_io_redirect
0000a118 g       *ABS*	00000000 __DTOR_END__
0000853c g     F .text	00000014 puts
00009210 g     F .text	000000ec altera_avalon_jtag_uart_read
00008434 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008d28 g     F .text	00000064 .hidden __udivsi3
0000a5c8 g     O .rwdata	00000004 alt_max_fd
0000a5b0 g     O .rwdata	00000004 _global_impure_ptr
0000a8b4 g       *ABS*	00000000 __bss_end
0000a408 g     O .rwdata	00000028 alt_dev_null
000094a4 g     F .text	00000020 alt_dcache_flush_all
0000a5d0 g       *ABS*	00000000 __ram_rwdata_end
0000a5c0 g     O .rwdata	00000008 alt_dev_list
00008fb0 g     F .text	00000100 write
0000a2fc g       *ABS*	00000000 __ram_rodata_end
00008d8c g     F .text	00000058 .hidden __umodsi3
0000a8b4 g       *ABS*	00000000 end
0000a118 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000092fc g     F .text	00000094 altera_avalon_jtag_uart_write
000085d8 g     F .text	0000052c ___vfprintf_internal_r
00009f54 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
0000911c g     F .text	00000034 alt_sys_init
00009dfc g     F .text	00000158 __register_exitproc
00008de4 g     F .text	00000028 .hidden __mulsi3
0000a2fc g       *ABS*	00000000 __ram_rwdata_start
0000a118 g       *ABS*	00000000 __ram_rodata_start
00009150 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009cd4 g     F .text	000000c4 alt_get_fd
00009dcc g     F .text	00000030 memcmp
0000a8b4 g       *ABS*	00000000 __alt_stack_base
00009bcc g     F .text	00000108 alt_find_file
0000952c g     F .text	000000a4 alt_dev_llist_insert
00008b20 g     F .text	000000b8 __sfvwrite_small_dev
0000a8a4 g       *ABS*	00000000 __bss_start
000083f8 g     F .text	0000003c main
0000a8b0 g     O .bss	00000004 alt_envp
000091b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a5cc g     O .rwdata	00000004 alt_errno
00008c30 g     F .text	00000084 .hidden __divsi3
0000a118 g       *ABS*	00000000 __CTOR_END__
0000a118 g       *ABS*	00000000 __flash_rodata_start
0000a118 g       *ABS*	00000000 __DTOR_LIST__
000090e4 g     F .text	00000038 alt_irq_init
00009a94 g     F .text	00000084 alt_release_fd
00009d98 g     F .text	00000014 atexit
00008bd8 g     F .text	00000058 _write_r
0000a5b4 g     O .rwdata	00000004 _impure_ptr
0000a8a8 g     O .bss	00000004 alt_argc
00009630 g     F .text	00000060 _do_dtors
0000a5b8 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a5d0 g       *ABS*	00000000 _edata
0000a8b4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009dac g     F .text	00000020 exit
00008cb4 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a0e4 g     F .text	00000034 _exit
00008550 g     F .text	0000001c strlen
00009938 g     F .text	0000015c open
00009690 g     F .text	00000020 alt_icache_flush_all
00008b04 g     F .text	0000001c __vfprintf_internal
000095d0 g     F .text	00000060 _do_ctors
000093cc g     F .text	000000d8 close
00008e74 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6896c14 	ori	gp,gp,9648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aa2914 	ori	r2,r2,43172

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ea2d14 	ori	r3,r3,43188

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff5a94>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008e740 	call	8e74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008ef80 	call	8ef8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff5aa8>

0000805c <klein_test>:
#define BLAKE2S_ADDR_DIGEST0  0x40
#define BLAKE2S_ADDR_DIGEST7  0x47


// klein64 test function
void klein_test(void) {
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dfc00315 	stw	ra,12(sp)
    8064:	df000215 	stw	fp,8(sp)
    8068:	df000204 	addi	fp,sp,8
	// reset

	// cipher
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_BLOCK0, 0xdeadbeef);
    806c:	00f7abb4 	movhi	r3,57006
    8070:	18efbbc4 	addi	r3,r3,-16657
    8074:	00800074 	movhi	r2,1
    8078:	10852004 	addi	r2,r2,5248
    807c:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_BLOCK1, 0xf000000f);
    8080:	00fc0034 	movhi	r3,61440
    8084:	18c003c4 	addi	r3,r3,15
    8088:	00800074 	movhi	r2,1
    808c:	10852104 	addi	r2,r2,5252
    8090:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_KEY0, 0x12345678);
    8094:	00c48d34 	movhi	r3,4660
    8098:	18d59e04 	addi	r3,r3,22136
    809c:	00800074 	movhi	r2,1
    80a0:	10851004 	addi	r2,r2,5184
    80a4:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_KEY1, 0x90abcdef);
    80a8:	00e42b34 	movhi	r3,37036
    80ac:	18f37bc4 	addi	r3,r3,-12817
    80b0:	00800074 	movhi	r2,1
    80b4:	10851104 	addi	r2,r2,5188
    80b8:	10c00035 	stwio	r3,0(r2)

	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_CONF, 0x01);
    80bc:	00c00044 	movi	r3,1
    80c0:	00800074 	movhi	r2,1
    80c4:	10850104 	addi	r2,r2,5124
    80c8:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_CTRL, 0x02);
    80cc:	00c00084 	movi	r3,2
    80d0:	00800074 	movhi	r2,1
    80d4:	10850004 	addi	r2,r2,5120
    80d8:	10c00035 	stwio	r3,0(r2)

	while(!(IORD(KLEIN64_0_BASE, KLEIN_ADDR_STATUS) == 0x03));
    80dc:	0001883a 	nop
    80e0:	00800074 	movhi	r2,1
    80e4:	10850204 	addi	r2,r2,5128
    80e8:	10800037 	ldwio	r2,0(r2)
    80ec:	108000d8 	cmpnei	r2,r2,3
    80f0:	103ffb1e 	bne	r2,zero,80e0 <_gp+0xffff5b30>

	int block_1, block_2;
	block_1 = IORD(KLEIN64_0_BASE, KLEIN_ADDR_RESULT0);
    80f4:	00800074 	movhi	r2,1
    80f8:	10853004 	addi	r2,r2,5312
    80fc:	10800037 	ldwio	r2,0(r2)
    8100:	e0bffe15 	stw	r2,-8(fp)
	block_2 = IORD(KLEIN64_0_BASE, KLEIN_ADDR_RESULT1);
    8104:	00800074 	movhi	r2,1
    8108:	10853104 	addi	r2,r2,5316
    810c:	10800037 	ldwio	r2,0(r2)
    8110:	e0bfff15 	stw	r2,-4(fp)

	printf("\r--------------------------------------\r\n");
    8114:	01000074 	movhi	r4,1
    8118:	21284604 	addi	r4,r4,-24296
    811c:	000853c0 	call	853c <puts>
	printf("\r# KLEIN-64 - Cipher and Decipher ============================================\r\n");
    8120:	01000074 	movhi	r4,1
    8124:	21285104 	addi	r4,r4,-24252
    8128:	000853c0 	call	853c <puts>
	printf("\rInput:      deadbeeff000000f\r\n");
    812c:	01000074 	movhi	r4,1
    8130:	21286504 	addi	r4,r4,-24172
    8134:	000853c0 	call	853c <puts>
	printf("\rOutput:     1234567890abcdef\r\n");
    8138:	01000074 	movhi	r4,1
    813c:	21286d04 	addi	r4,r4,-24140
    8140:	000853c0 	call	853c <puts>
	printf("\rCipher:     %.8x%.8x\r\n", block_1, block_2);
    8144:	e1bfff17 	ldw	r6,-4(fp)
    8148:	e17ffe17 	ldw	r5,-8(fp)
    814c:	01000074 	movhi	r4,1
    8150:	21287504 	addi	r4,r4,-24108
    8154:	00084700 	call	8470 <printf>

	// decipher
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_BLOCK0, block_1);
    8158:	00800074 	movhi	r2,1
    815c:	10852004 	addi	r2,r2,5248
    8160:	e0fffe17 	ldw	r3,-8(fp)
    8164:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_BLOCK1, block_2);
    8168:	00800074 	movhi	r2,1
    816c:	10852104 	addi	r2,r2,5252
    8170:	e0ffff17 	ldw	r3,-4(fp)
    8174:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_KEY0, 0x12345678);
    8178:	00c48d34 	movhi	r3,4660
    817c:	18d59e04 	addi	r3,r3,22136
    8180:	00800074 	movhi	r2,1
    8184:	10851004 	addi	r2,r2,5184
    8188:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_KEY1, 0x90abcdef);
    818c:	00e42b34 	movhi	r3,37036
    8190:	18f37bc4 	addi	r3,r3,-12817
    8194:	00800074 	movhi	r2,1
    8198:	10851104 	addi	r2,r2,5188
    819c:	10c00035 	stwio	r3,0(r2)

	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_CONF, 0x00);
    81a0:	0007883a 	mov	r3,zero
    81a4:	00800074 	movhi	r2,1
    81a8:	10850104 	addi	r2,r2,5124
    81ac:	10c00035 	stwio	r3,0(r2)
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_CTRL, 0x01);
    81b0:	00c00044 	movi	r3,1
    81b4:	00800074 	movhi	r2,1
    81b8:	10850004 	addi	r2,r2,5120
    81bc:	10c00035 	stwio	r3,0(r2)

	while(!(IORD(KLEIN64_0_BASE, KLEIN_ADDR_STATUS) == 0x01));
    81c0:	0001883a 	nop
    81c4:	00800074 	movhi	r2,1
    81c8:	10850204 	addi	r2,r2,5128
    81cc:	10800037 	ldwio	r2,0(r2)
    81d0:	10800058 	cmpnei	r2,r2,1
    81d4:	103ffb1e 	bne	r2,zero,81c4 <_gp+0xffff5c14>
	IOWR(KLEIN64_0_BASE, KLEIN_ADDR_CTRL, 0x02);
    81d8:	00c00084 	movi	r3,2
    81dc:	00800074 	movhi	r2,1
    81e0:	10850004 	addi	r2,r2,5120
    81e4:	10c00035 	stwio	r3,0(r2)
	while(!(IORD(KLEIN64_0_BASE, KLEIN_ADDR_STATUS) == 0x03));
    81e8:	0001883a 	nop
    81ec:	00800074 	movhi	r2,1
    81f0:	10850204 	addi	r2,r2,5128
    81f4:	10800037 	ldwio	r2,0(r2)
    81f8:	108000d8 	cmpnei	r2,r2,3
    81fc:	103ffb1e 	bne	r2,zero,81ec <_gp+0xffff5c3c>

	block_1 = IORD(KLEIN64_0_BASE, KLEIN_ADDR_RESULT0);
    8200:	00800074 	movhi	r2,1
    8204:	10853004 	addi	r2,r2,5312
    8208:	10800037 	ldwio	r2,0(r2)
    820c:	e0bffe15 	stw	r2,-8(fp)
	block_2 = IORD(KLEIN64_0_BASE, KLEIN_ADDR_RESULT1);
    8210:	00800074 	movhi	r2,1
    8214:	10853104 	addi	r2,r2,5316
    8218:	10800037 	ldwio	r2,0(r2)
    821c:	e0bfff15 	stw	r2,-4(fp)

	printf("\rDecipher:   %.8x%.8x\r\n", block_1, block_2);
    8220:	e1bfff17 	ldw	r6,-4(fp)
    8224:	e17ffe17 	ldw	r5,-8(fp)
    8228:	01000074 	movhi	r4,1
    822c:	21287b04 	addi	r4,r4,-24084
    8230:	00084700 	call	8470 <printf>
}
    8234:	0001883a 	nop
    8238:	e037883a 	mov	sp,fp
    823c:	dfc00117 	ldw	ra,4(sp)
    8240:	df000017 	ldw	fp,0(sp)
    8244:	dec00204 	addi	sp,sp,8
    8248:	f800283a 	ret

0000824c <blake2s_test_RFC_7693>:

// blake2s test function
void blake2s_test_RFC_7693(void) {
    824c:	defffb04 	addi	sp,sp,-20
    8250:	dfc00415 	stw	ra,16(sp)
    8254:	df000315 	stw	fp,12(sp)
    8258:	df000304 	addi	fp,sp,12
	// clear block
	for(int i = 0; i < 16; i++)
    825c:	e03ffd15 	stw	zero,-12(fp)
    8260:	00000d06 	br	8298 <blake2s_test_RFC_7693+0x4c>
		IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_BLOCK0 + i, 0x0);
    8264:	e0bffd17 	ldw	r2,-12(fp)
    8268:	10800404 	addi	r2,r2,16
    826c:	1085883a 	add	r2,r2,r2
    8270:	1085883a 	add	r2,r2,r2
    8274:	1007883a 	mov	r3,r2
    8278:	00800074 	movhi	r2,1
    827c:	10840004 	addi	r2,r2,4096
    8280:	1885883a 	add	r2,r3,r2
    8284:	0007883a 	mov	r3,zero
    8288:	10c00035 	stwio	r3,0(r2)
}

// blake2s test function
void blake2s_test_RFC_7693(void) {
	// clear block
	for(int i = 0; i < 16; i++)
    828c:	e0bffd17 	ldw	r2,-12(fp)
    8290:	10800044 	addi	r2,r2,1
    8294:	e0bffd15 	stw	r2,-12(fp)
    8298:	e0bffd17 	ldw	r2,-12(fp)
    829c:	10800410 	cmplti	r2,r2,16
    82a0:	103ff01e 	bne	r2,zero,8264 <_gp+0xffff5cb4>
		IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_BLOCK0 + i, 0x0);

	// init
	IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_CTRL, 0x1);
    82a4:	00c00044 	movi	r3,1
    82a8:	00800074 	movhi	r2,1
    82ac:	10840804 	addi	r2,r2,4128
    82b0:	10c00035 	stwio	r3,0(r2)
	while(IORD(BLAKE2S_0_BASE, BLAKE2S_ADDR_STATUS) == 0);
    82b4:	0001883a 	nop
    82b8:	00800074 	movhi	r2,1
    82bc:	10840904 	addi	r2,r2,4132
    82c0:	10800037 	ldwio	r2,0(r2)
    82c4:	103ffc26 	beq	r2,zero,82b8 <_gp+0xffff5d08>

	// finish
	IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_BLOCK0, 0x61626300); // abc
    82c8:	00d858b4 	movhi	r3,24930
    82cc:	18d8c004 	addi	r3,r3,25344
    82d0:	00800074 	movhi	r2,1
    82d4:	10841004 	addi	r2,r2,4160
    82d8:	10c00035 	stwio	r3,0(r2)
	for(int i = 1; i < 16; i++)
    82dc:	00800044 	movi	r2,1
    82e0:	e0bffe15 	stw	r2,-8(fp)
    82e4:	00000d06 	br	831c <blake2s_test_RFC_7693+0xd0>
		IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_BLOCK0 + i, 0x0);
    82e8:	e0bffe17 	ldw	r2,-8(fp)
    82ec:	10800404 	addi	r2,r2,16
    82f0:	1085883a 	add	r2,r2,r2
    82f4:	1085883a 	add	r2,r2,r2
    82f8:	1007883a 	mov	r3,r2
    82fc:	00800074 	movhi	r2,1
    8300:	10840004 	addi	r2,r2,4096
    8304:	1885883a 	add	r2,r3,r2
    8308:	0007883a 	mov	r3,zero
    830c:	10c00035 	stwio	r3,0(r2)
	IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_CTRL, 0x1);
	while(IORD(BLAKE2S_0_BASE, BLAKE2S_ADDR_STATUS) == 0);

	// finish
	IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_BLOCK0, 0x61626300); // abc
	for(int i = 1; i < 16; i++)
    8310:	e0bffe17 	ldw	r2,-8(fp)
    8314:	10800044 	addi	r2,r2,1
    8318:	e0bffe15 	stw	r2,-8(fp)
    831c:	e0bffe17 	ldw	r2,-8(fp)
    8320:	10800410 	cmplti	r2,r2,16
    8324:	103ff01e 	bne	r2,zero,82e8 <_gp+0xffff5d38>
		IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_BLOCK0 + i, 0x0);
	IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_BLOCKLEN, 0x3);
    8328:	00c000c4 	movi	r3,3
    832c:	00800074 	movhi	r2,1
    8330:	10840a04 	addi	r2,r2,4136
    8334:	10c00035 	stwio	r3,0(r2)
	IOWR(BLAKE2S_0_BASE, BLAKE2S_ADDR_CTRL, 0x4);
    8338:	00c00104 	movi	r3,4
    833c:	00800074 	movhi	r2,1
    8340:	10840804 	addi	r2,r2,4128
    8344:	10c00035 	stwio	r3,0(r2)
	while(IORD(BLAKE2S_0_BASE, BLAKE2S_ADDR_STATUS) == 0);
    8348:	0001883a 	nop
    834c:	00800074 	movhi	r2,1
    8350:	10840904 	addi	r2,r2,4132
    8354:	10800037 	ldwio	r2,0(r2)
    8358:	103ffc26 	beq	r2,zero,834c <_gp+0xffff5d9c>

	// read output
	printf("\r\n----------3. Test blake2s with message in RFC 7693\r\n");
    835c:	01000074 	movhi	r4,1
    8360:	21288104 	addi	r4,r4,-24060
    8364:	000853c0 	call	853c <puts>
	printf("Input:    616263\r\n");
    8368:	01000074 	movhi	r4,1
    836c:	21288f04 	addi	r4,r4,-24004
    8370:	000853c0 	call	853c <puts>
	printf("Output:   ");
    8374:	01000074 	movhi	r4,1
    8378:	21289404 	addi	r4,r4,-23984
    837c:	00084700 	call	8470 <printf>
	for(int i = 0; i < 8; i++) {
    8380:	e03fff15 	stw	zero,-4(fp)
    8384:	00001006 	br	83c8 <blake2s_test_RFC_7693+0x17c>
	  printf("%.8x", IORD(BLAKE2S_0_BASE, BLAKE2S_ADDR_DIGEST0 + i));
    8388:	e0bfff17 	ldw	r2,-4(fp)
    838c:	10801004 	addi	r2,r2,64
    8390:	1085883a 	add	r2,r2,r2
    8394:	1085883a 	add	r2,r2,r2
    8398:	1007883a 	mov	r3,r2
    839c:	00800074 	movhi	r2,1
    83a0:	10840004 	addi	r2,r2,4096
    83a4:	1885883a 	add	r2,r3,r2
    83a8:	10800037 	ldwio	r2,0(r2)
    83ac:	100b883a 	mov	r5,r2
    83b0:	01000074 	movhi	r4,1
    83b4:	21289704 	addi	r4,r4,-23972
    83b8:	00084700 	call	8470 <printf>

	// read output
	printf("\r\n----------3. Test blake2s with message in RFC 7693\r\n");
	printf("Input:    616263\r\n");
	printf("Output:   ");
	for(int i = 0; i < 8; i++) {
    83bc:	e0bfff17 	ldw	r2,-4(fp)
    83c0:	10800044 	addi	r2,r2,1
    83c4:	e0bfff15 	stw	r2,-4(fp)
    83c8:	e0bfff17 	ldw	r2,-4(fp)
    83cc:	10800210 	cmplti	r2,r2,8
    83d0:	103fed1e 	bne	r2,zero,8388 <_gp+0xffff5dd8>
	  printf("%.8x", IORD(BLAKE2S_0_BASE, BLAKE2S_ADDR_DIGEST0 + i));
	}
	printf("\r\nExpected: 508c5e8c327c14e2e1a72ba34eeb452f37458b209ed63a294d999b4c86675982\r\n");
    83d4:	01000074 	movhi	r4,1
    83d8:	21289904 	addi	r4,r4,-23964
    83dc:	000853c0 	call	853c <puts>
}
    83e0:	0001883a 	nop
    83e4:	e037883a 	mov	sp,fp
    83e8:	dfc00117 	ldw	ra,4(sp)
    83ec:	df000017 	ldw	fp,0(sp)
    83f0:	dec00204 	addi	sp,sp,8
    83f4:	f800283a 	ret

000083f8 <main>:

void main() {
    83f8:	defffe04 	addi	sp,sp,-8
    83fc:	dfc00115 	stw	ra,4(sp)
    8400:	df000015 	stw	fp,0(sp)
    8404:	d839883a 	mov	fp,sp
	printf("Hello world. \r\n");
    8408:	01000074 	movhi	r4,1
    840c:	2128ad04 	addi	r4,r4,-23884
    8410:	000853c0 	call	853c <puts>
	klein_test();
    8414:	000805c0 	call	805c <klein_test>
	blake2s_test_RFC_7693();
    8418:	000824c0 	call	824c <blake2s_test_RFC_7693>
}
    841c:	0001883a 	nop
    8420:	e037883a 	mov	sp,fp
    8424:	dfc00117 	ldw	ra,4(sp)
    8428:	df000017 	ldw	fp,0(sp)
    842c:	dec00204 	addi	sp,sp,8
    8430:	f800283a 	ret

00008434 <_printf_r>:
    8434:	defffd04 	addi	sp,sp,-12
    8438:	dfc00015 	stw	ra,0(sp)
    843c:	d9800115 	stw	r6,4(sp)
    8440:	d9c00215 	stw	r7,8(sp)
    8444:	20c00217 	ldw	r3,8(r4)
    8448:	01800074 	movhi	r6,1
    844c:	31a2c804 	addi	r6,r6,-29920
    8450:	19800115 	stw	r6,4(r3)
    8454:	280d883a 	mov	r6,r5
    8458:	21400217 	ldw	r5,8(r4)
    845c:	d9c00104 	addi	r7,sp,4
    8460:	00085d80 	call	85d8 <___vfprintf_internal_r>
    8464:	dfc00017 	ldw	ra,0(sp)
    8468:	dec00304 	addi	sp,sp,12
    846c:	f800283a 	ret

00008470 <printf>:
    8470:	defffc04 	addi	sp,sp,-16
    8474:	dfc00015 	stw	ra,0(sp)
    8478:	d9400115 	stw	r5,4(sp)
    847c:	d9800215 	stw	r6,8(sp)
    8480:	d9c00315 	stw	r7,12(sp)
    8484:	00800074 	movhi	r2,1
    8488:	10a96d04 	addi	r2,r2,-23116
    848c:	10800017 	ldw	r2,0(r2)
    8490:	01400074 	movhi	r5,1
    8494:	2962c804 	addi	r5,r5,-29920
    8498:	10c00217 	ldw	r3,8(r2)
    849c:	d9800104 	addi	r6,sp,4
    84a0:	19400115 	stw	r5,4(r3)
    84a4:	200b883a 	mov	r5,r4
    84a8:	11000217 	ldw	r4,8(r2)
    84ac:	0008b040 	call	8b04 <__vfprintf_internal>
    84b0:	dfc00017 	ldw	ra,0(sp)
    84b4:	dec00404 	addi	sp,sp,16
    84b8:	f800283a 	ret

000084bc <_puts_r>:
    84bc:	defffd04 	addi	sp,sp,-12
    84c0:	dc000015 	stw	r16,0(sp)
    84c4:	2021883a 	mov	r16,r4
    84c8:	2809883a 	mov	r4,r5
    84cc:	dfc00215 	stw	ra,8(sp)
    84d0:	dc400115 	stw	r17,4(sp)
    84d4:	2823883a 	mov	r17,r5
    84d8:	00085500 	call	8550 <strlen>
    84dc:	81400217 	ldw	r5,8(r16)
    84e0:	01000074 	movhi	r4,1
    84e4:	2122c804 	addi	r4,r4,-29920
    84e8:	29000115 	stw	r4,4(r5)
    84ec:	100f883a 	mov	r7,r2
    84f0:	880d883a 	mov	r6,r17
    84f4:	8009883a 	mov	r4,r16
    84f8:	0008b200 	call	8b20 <__sfvwrite_small_dev>
    84fc:	00ffffc4 	movi	r3,-1
    8500:	10c00926 	beq	r2,r3,8528 <_puts_r+0x6c>
    8504:	81400217 	ldw	r5,8(r16)
    8508:	01800074 	movhi	r6,1
    850c:	01c00044 	movi	r7,1
    8510:	28800117 	ldw	r2,4(r5)
    8514:	31a8b104 	addi	r6,r6,-23868
    8518:	8009883a 	mov	r4,r16
    851c:	103ee83a 	callr	r2
    8520:	10bfffe0 	cmpeqi	r2,r2,-1
    8524:	0085c83a 	sub	r2,zero,r2
    8528:	dfc00217 	ldw	ra,8(sp)
    852c:	dc400117 	ldw	r17,4(sp)
    8530:	dc000017 	ldw	r16,0(sp)
    8534:	dec00304 	addi	sp,sp,12
    8538:	f800283a 	ret

0000853c <puts>:
    853c:	00800074 	movhi	r2,1
    8540:	10a96d04 	addi	r2,r2,-23116
    8544:	200b883a 	mov	r5,r4
    8548:	11000017 	ldw	r4,0(r2)
    854c:	00084bc1 	jmpi	84bc <_puts_r>

00008550 <strlen>:
    8550:	2005883a 	mov	r2,r4
    8554:	10c00007 	ldb	r3,0(r2)
    8558:	18000226 	beq	r3,zero,8564 <strlen+0x14>
    855c:	10800044 	addi	r2,r2,1
    8560:	003ffc06 	br	8554 <_gp+0xffff5fa4>
    8564:	1105c83a 	sub	r2,r2,r4
    8568:	f800283a 	ret

0000856c <print_repeat>:
    856c:	defffb04 	addi	sp,sp,-20
    8570:	dc800315 	stw	r18,12(sp)
    8574:	dc400215 	stw	r17,8(sp)
    8578:	dc000115 	stw	r16,4(sp)
    857c:	dfc00415 	stw	ra,16(sp)
    8580:	2025883a 	mov	r18,r4
    8584:	2823883a 	mov	r17,r5
    8588:	d9800005 	stb	r6,0(sp)
    858c:	3821883a 	mov	r16,r7
    8590:	04000a0e 	bge	zero,r16,85bc <print_repeat+0x50>
    8594:	88800117 	ldw	r2,4(r17)
    8598:	01c00044 	movi	r7,1
    859c:	d80d883a 	mov	r6,sp
    85a0:	880b883a 	mov	r5,r17
    85a4:	9009883a 	mov	r4,r18
    85a8:	103ee83a 	callr	r2
    85ac:	843fffc4 	addi	r16,r16,-1
    85b0:	103ff726 	beq	r2,zero,8590 <_gp+0xffff5fe0>
    85b4:	00bfffc4 	movi	r2,-1
    85b8:	00000106 	br	85c0 <print_repeat+0x54>
    85bc:	0005883a 	mov	r2,zero
    85c0:	dfc00417 	ldw	ra,16(sp)
    85c4:	dc800317 	ldw	r18,12(sp)
    85c8:	dc400217 	ldw	r17,8(sp)
    85cc:	dc000117 	ldw	r16,4(sp)
    85d0:	dec00504 	addi	sp,sp,20
    85d4:	f800283a 	ret

000085d8 <___vfprintf_internal_r>:
    85d8:	deffe504 	addi	sp,sp,-108
    85dc:	d8c00804 	addi	r3,sp,32
    85e0:	ddc01815 	stw	r23,96(sp)
    85e4:	dd801715 	stw	r22,92(sp)
    85e8:	dd401615 	stw	r21,88(sp)
    85ec:	dd001515 	stw	r20,84(sp)
    85f0:	dcc01415 	stw	r19,80(sp)
    85f4:	dc801315 	stw	r18,76(sp)
    85f8:	dc401215 	stw	r17,72(sp)
    85fc:	dc001115 	stw	r16,68(sp)
    8600:	dfc01a15 	stw	ra,104(sp)
    8604:	df001915 	stw	fp,100(sp)
    8608:	2029883a 	mov	r20,r4
    860c:	2823883a 	mov	r17,r5
    8610:	382d883a 	mov	r22,r7
    8614:	d9800f15 	stw	r6,60(sp)
    8618:	0021883a 	mov	r16,zero
    861c:	d8000e15 	stw	zero,56(sp)
    8620:	d8000a15 	stw	zero,40(sp)
    8624:	002b883a 	mov	r21,zero
    8628:	0027883a 	mov	r19,zero
    862c:	0025883a 	mov	r18,zero
    8630:	d8000c15 	stw	zero,48(sp)
    8634:	d8000b15 	stw	zero,44(sp)
    8638:	002f883a 	mov	r23,zero
    863c:	d8c00915 	stw	r3,36(sp)
    8640:	d8c00f17 	ldw	r3,60(sp)
    8644:	19000003 	ldbu	r4,0(r3)
    8648:	20803fcc 	andi	r2,r4,255
    864c:	1080201c 	xori	r2,r2,128
    8650:	10bfe004 	addi	r2,r2,-128
    8654:	10011e26 	beq	r2,zero,8ad0 <___vfprintf_internal_r+0x4f8>
    8658:	00c00044 	movi	r3,1
    865c:	b8c01426 	beq	r23,r3,86b0 <___vfprintf_internal_r+0xd8>
    8660:	1dc00216 	blt	r3,r23,866c <___vfprintf_internal_r+0x94>
    8664:	b8000626 	beq	r23,zero,8680 <___vfprintf_internal_r+0xa8>
    8668:	00011506 	br	8ac0 <___vfprintf_internal_r+0x4e8>
    866c:	01400084 	movi	r5,2
    8670:	b9401d26 	beq	r23,r5,86e8 <___vfprintf_internal_r+0x110>
    8674:	014000c4 	movi	r5,3
    8678:	b9402b26 	beq	r23,r5,8728 <___vfprintf_internal_r+0x150>
    867c:	00011006 	br	8ac0 <___vfprintf_internal_r+0x4e8>
    8680:	01400944 	movi	r5,37
    8684:	1140fc26 	beq	r2,r5,8a78 <___vfprintf_internal_r+0x4a0>
    8688:	88800117 	ldw	r2,4(r17)
    868c:	d9000005 	stb	r4,0(sp)
    8690:	01c00044 	movi	r7,1
    8694:	d80d883a 	mov	r6,sp
    8698:	880b883a 	mov	r5,r17
    869c:	a009883a 	mov	r4,r20
    86a0:	103ee83a 	callr	r2
    86a4:	1000d81e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    86a8:	84000044 	addi	r16,r16,1
    86ac:	00010406 	br	8ac0 <___vfprintf_internal_r+0x4e8>
    86b0:	01400c04 	movi	r5,48
    86b4:	1140fa26 	beq	r2,r5,8aa0 <___vfprintf_internal_r+0x4c8>
    86b8:	01400944 	movi	r5,37
    86bc:	11400a1e 	bne	r2,r5,86e8 <___vfprintf_internal_r+0x110>
    86c0:	d8800005 	stb	r2,0(sp)
    86c4:	88800117 	ldw	r2,4(r17)
    86c8:	b80f883a 	mov	r7,r23
    86cc:	d80d883a 	mov	r6,sp
    86d0:	880b883a 	mov	r5,r17
    86d4:	a009883a 	mov	r4,r20
    86d8:	103ee83a 	callr	r2
    86dc:	1000ca1e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    86e0:	84000044 	addi	r16,r16,1
    86e4:	0000f506 	br	8abc <___vfprintf_internal_r+0x4e4>
    86e8:	25fff404 	addi	r23,r4,-48
    86ec:	bdc03fcc 	andi	r23,r23,255
    86f0:	00c00244 	movi	r3,9
    86f4:	1dc00936 	bltu	r3,r23,871c <___vfprintf_internal_r+0x144>
    86f8:	00bfffc4 	movi	r2,-1
    86fc:	90800426 	beq	r18,r2,8710 <___vfprintf_internal_r+0x138>
    8700:	01400284 	movi	r5,10
    8704:	9009883a 	mov	r4,r18
    8708:	0008de40 	call	8de4 <__mulsi3>
    870c:	00000106 	br	8714 <___vfprintf_internal_r+0x13c>
    8710:	0005883a 	mov	r2,zero
    8714:	b8a5883a 	add	r18,r23,r2
    8718:	0000e206 	br	8aa4 <___vfprintf_internal_r+0x4cc>
    871c:	01400b84 	movi	r5,46
    8720:	1140e426 	beq	r2,r5,8ab4 <___vfprintf_internal_r+0x4dc>
    8724:	05c00084 	movi	r23,2
    8728:	213ff404 	addi	r4,r4,-48
    872c:	27003fcc 	andi	fp,r4,255
    8730:	00c00244 	movi	r3,9
    8734:	1f000936 	bltu	r3,fp,875c <___vfprintf_internal_r+0x184>
    8738:	00bfffc4 	movi	r2,-1
    873c:	98800426 	beq	r19,r2,8750 <___vfprintf_internal_r+0x178>
    8740:	01400284 	movi	r5,10
    8744:	9809883a 	mov	r4,r19
    8748:	0008de40 	call	8de4 <__mulsi3>
    874c:	00000106 	br	8754 <___vfprintf_internal_r+0x17c>
    8750:	0005883a 	mov	r2,zero
    8754:	e0a7883a 	add	r19,fp,r2
    8758:	0000d906 	br	8ac0 <___vfprintf_internal_r+0x4e8>
    875c:	00c01b04 	movi	r3,108
    8760:	10c0d226 	beq	r2,r3,8aac <___vfprintf_internal_r+0x4d4>
    8764:	013fffc4 	movi	r4,-1
    8768:	99000226 	beq	r19,r4,8774 <___vfprintf_internal_r+0x19c>
    876c:	d8000b15 	stw	zero,44(sp)
    8770:	00000106 	br	8778 <___vfprintf_internal_r+0x1a0>
    8774:	04c00044 	movi	r19,1
    8778:	01001a44 	movi	r4,105
    877c:	11001626 	beq	r2,r4,87d8 <___vfprintf_internal_r+0x200>
    8780:	20800916 	blt	r4,r2,87a8 <___vfprintf_internal_r+0x1d0>
    8784:	010018c4 	movi	r4,99
    8788:	11008826 	beq	r2,r4,89ac <___vfprintf_internal_r+0x3d4>
    878c:	01001904 	movi	r4,100
    8790:	11001126 	beq	r2,r4,87d8 <___vfprintf_internal_r+0x200>
    8794:	01001604 	movi	r4,88
    8798:	1100c81e 	bne	r2,r4,8abc <___vfprintf_internal_r+0x4e4>
    879c:	00c00044 	movi	r3,1
    87a0:	d8c00e15 	stw	r3,56(sp)
    87a4:	00001506 	br	87fc <___vfprintf_internal_r+0x224>
    87a8:	01001cc4 	movi	r4,115
    87ac:	11009826 	beq	r2,r4,8a10 <___vfprintf_internal_r+0x438>
    87b0:	20800416 	blt	r4,r2,87c4 <___vfprintf_internal_r+0x1ec>
    87b4:	01001bc4 	movi	r4,111
    87b8:	1100c01e 	bne	r2,r4,8abc <___vfprintf_internal_r+0x4e4>
    87bc:	05400204 	movi	r21,8
    87c0:	00000f06 	br	8800 <___vfprintf_internal_r+0x228>
    87c4:	01001d44 	movi	r4,117
    87c8:	11000d26 	beq	r2,r4,8800 <___vfprintf_internal_r+0x228>
    87cc:	01001e04 	movi	r4,120
    87d0:	11000a26 	beq	r2,r4,87fc <___vfprintf_internal_r+0x224>
    87d4:	0000b906 	br	8abc <___vfprintf_internal_r+0x4e4>
    87d8:	d8c00a17 	ldw	r3,40(sp)
    87dc:	b7000104 	addi	fp,r22,4
    87e0:	18000726 	beq	r3,zero,8800 <___vfprintf_internal_r+0x228>
    87e4:	df000d15 	stw	fp,52(sp)
    87e8:	b5c00017 	ldw	r23,0(r22)
    87ec:	b800080e 	bge	r23,zero,8810 <___vfprintf_internal_r+0x238>
    87f0:	05efc83a 	sub	r23,zero,r23
    87f4:	02400044 	movi	r9,1
    87f8:	00000606 	br	8814 <___vfprintf_internal_r+0x23c>
    87fc:	05400404 	movi	r21,16
    8800:	b0c00104 	addi	r3,r22,4
    8804:	d8c00d15 	stw	r3,52(sp)
    8808:	b5c00017 	ldw	r23,0(r22)
    880c:	d8000a15 	stw	zero,40(sp)
    8810:	0013883a 	mov	r9,zero
    8814:	d839883a 	mov	fp,sp
    8818:	b8001726 	beq	r23,zero,8878 <___vfprintf_internal_r+0x2a0>
    881c:	a80b883a 	mov	r5,r21
    8820:	b809883a 	mov	r4,r23
    8824:	da401015 	stw	r9,64(sp)
    8828:	0008d280 	call	8d28 <__udivsi3>
    882c:	a80b883a 	mov	r5,r21
    8830:	1009883a 	mov	r4,r2
    8834:	102d883a 	mov	r22,r2
    8838:	0008de40 	call	8de4 <__mulsi3>
    883c:	b885c83a 	sub	r2,r23,r2
    8840:	00c00244 	movi	r3,9
    8844:	da401017 	ldw	r9,64(sp)
    8848:	18800216 	blt	r3,r2,8854 <___vfprintf_internal_r+0x27c>
    884c:	10800c04 	addi	r2,r2,48
    8850:	00000506 	br	8868 <___vfprintf_internal_r+0x290>
    8854:	d8c00e17 	ldw	r3,56(sp)
    8858:	18000226 	beq	r3,zero,8864 <___vfprintf_internal_r+0x28c>
    885c:	10800dc4 	addi	r2,r2,55
    8860:	00000106 	br	8868 <___vfprintf_internal_r+0x290>
    8864:	108015c4 	addi	r2,r2,87
    8868:	e0800005 	stb	r2,0(fp)
    886c:	b02f883a 	mov	r23,r22
    8870:	e7000044 	addi	fp,fp,1
    8874:	003fe806 	br	8818 <_gp+0xffff6268>
    8878:	e6efc83a 	sub	r23,fp,sp
    887c:	9dc5c83a 	sub	r2,r19,r23
    8880:	0080090e 	bge	zero,r2,88a8 <___vfprintf_internal_r+0x2d0>
    8884:	e085883a 	add	r2,fp,r2
    8888:	01400c04 	movi	r5,48
    888c:	d8c00917 	ldw	r3,36(sp)
    8890:	e009883a 	mov	r4,fp
    8894:	e0c0032e 	bgeu	fp,r3,88a4 <___vfprintf_internal_r+0x2cc>
    8898:	e7000044 	addi	fp,fp,1
    889c:	21400005 	stb	r5,0(r4)
    88a0:	e0bffa1e 	bne	fp,r2,888c <_gp+0xffff62dc>
    88a4:	e6efc83a 	sub	r23,fp,sp
    88a8:	d8c00b17 	ldw	r3,44(sp)
    88ac:	4dd1883a 	add	r8,r9,r23
    88b0:	922dc83a 	sub	r22,r18,r8
    88b4:	18001626 	beq	r3,zero,8910 <___vfprintf_internal_r+0x338>
    88b8:	48000a26 	beq	r9,zero,88e4 <___vfprintf_internal_r+0x30c>
    88bc:	00800b44 	movi	r2,45
    88c0:	d8800805 	stb	r2,32(sp)
    88c4:	88800117 	ldw	r2,4(r17)
    88c8:	01c00044 	movi	r7,1
    88cc:	d9800804 	addi	r6,sp,32
    88d0:	880b883a 	mov	r5,r17
    88d4:	a009883a 	mov	r4,r20
    88d8:	103ee83a 	callr	r2
    88dc:	10004a1e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    88e0:	84000044 	addi	r16,r16,1
    88e4:	0580070e 	bge	zero,r22,8904 <___vfprintf_internal_r+0x32c>
    88e8:	b00f883a 	mov	r7,r22
    88ec:	01800c04 	movi	r6,48
    88f0:	880b883a 	mov	r5,r17
    88f4:	a009883a 	mov	r4,r20
    88f8:	000856c0 	call	856c <print_repeat>
    88fc:	1000421e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    8900:	85a1883a 	add	r16,r16,r22
    8904:	e02d883a 	mov	r22,fp
    8908:	bf2fc83a 	sub	r23,r23,fp
    890c:	00002006 	br	8990 <___vfprintf_internal_r+0x3b8>
    8910:	0580090e 	bge	zero,r22,8938 <___vfprintf_internal_r+0x360>
    8914:	b00f883a 	mov	r7,r22
    8918:	01800804 	movi	r6,32
    891c:	880b883a 	mov	r5,r17
    8920:	a009883a 	mov	r4,r20
    8924:	da401015 	stw	r9,64(sp)
    8928:	000856c0 	call	856c <print_repeat>
    892c:	da401017 	ldw	r9,64(sp)
    8930:	1000351e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    8934:	85a1883a 	add	r16,r16,r22
    8938:	483ff226 	beq	r9,zero,8904 <_gp+0xffff6354>
    893c:	00800b44 	movi	r2,45
    8940:	d8800805 	stb	r2,32(sp)
    8944:	88800117 	ldw	r2,4(r17)
    8948:	01c00044 	movi	r7,1
    894c:	d9800804 	addi	r6,sp,32
    8950:	880b883a 	mov	r5,r17
    8954:	a009883a 	mov	r4,r20
    8958:	103ee83a 	callr	r2
    895c:	10002a1e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    8960:	84000044 	addi	r16,r16,1
    8964:	003fe706 	br	8904 <_gp+0xffff6354>
    8968:	b5bfffc4 	addi	r22,r22,-1
    896c:	b0800003 	ldbu	r2,0(r22)
    8970:	01c00044 	movi	r7,1
    8974:	d9800804 	addi	r6,sp,32
    8978:	d8800805 	stb	r2,32(sp)
    897c:	88800117 	ldw	r2,4(r17)
    8980:	880b883a 	mov	r5,r17
    8984:	a009883a 	mov	r4,r20
    8988:	103ee83a 	callr	r2
    898c:	10001e1e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    8990:	8585c83a 	sub	r2,r16,r22
    8994:	b5c9883a 	add	r4,r22,r23
    8998:	e085883a 	add	r2,fp,r2
    899c:	013ff216 	blt	zero,r4,8968 <_gp+0xffff63b8>
    89a0:	1021883a 	mov	r16,r2
    89a4:	dd800d17 	ldw	r22,52(sp)
    89a8:	00004406 	br	8abc <___vfprintf_internal_r+0x4e4>
    89ac:	00800044 	movi	r2,1
    89b0:	1480080e 	bge	r2,r18,89d4 <___vfprintf_internal_r+0x3fc>
    89b4:	95ffffc4 	addi	r23,r18,-1
    89b8:	b80f883a 	mov	r7,r23
    89bc:	01800804 	movi	r6,32
    89c0:	880b883a 	mov	r5,r17
    89c4:	a009883a 	mov	r4,r20
    89c8:	000856c0 	call	856c <print_repeat>
    89cc:	10000e1e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    89d0:	85e1883a 	add	r16,r16,r23
    89d4:	b0800017 	ldw	r2,0(r22)
    89d8:	01c00044 	movi	r7,1
    89dc:	d80d883a 	mov	r6,sp
    89e0:	d8800005 	stb	r2,0(sp)
    89e4:	88800117 	ldw	r2,4(r17)
    89e8:	880b883a 	mov	r5,r17
    89ec:	a009883a 	mov	r4,r20
    89f0:	b5c00104 	addi	r23,r22,4
    89f4:	103ee83a 	callr	r2
    89f8:	1000031e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x430>
    89fc:	84000044 	addi	r16,r16,1
    8a00:	b82d883a 	mov	r22,r23
    8a04:	00002d06 	br	8abc <___vfprintf_internal_r+0x4e4>
    8a08:	00bfffc4 	movi	r2,-1
    8a0c:	00003106 	br	8ad4 <___vfprintf_internal_r+0x4fc>
    8a10:	b5c00017 	ldw	r23,0(r22)
    8a14:	b7000104 	addi	fp,r22,4
    8a18:	b809883a 	mov	r4,r23
    8a1c:	00085500 	call	8550 <strlen>
    8a20:	9091c83a 	sub	r8,r18,r2
    8a24:	102d883a 	mov	r22,r2
    8a28:	0200090e 	bge	zero,r8,8a50 <___vfprintf_internal_r+0x478>
    8a2c:	400f883a 	mov	r7,r8
    8a30:	01800804 	movi	r6,32
    8a34:	880b883a 	mov	r5,r17
    8a38:	a009883a 	mov	r4,r20
    8a3c:	da001015 	stw	r8,64(sp)
    8a40:	000856c0 	call	856c <print_repeat>
    8a44:	da001017 	ldw	r8,64(sp)
    8a48:	103fef1e 	bne	r2,zero,8a08 <_gp+0xffff6458>
    8a4c:	8221883a 	add	r16,r16,r8
    8a50:	88800117 	ldw	r2,4(r17)
    8a54:	b00f883a 	mov	r7,r22
    8a58:	b80d883a 	mov	r6,r23
    8a5c:	880b883a 	mov	r5,r17
    8a60:	a009883a 	mov	r4,r20
    8a64:	103ee83a 	callr	r2
    8a68:	103fe71e 	bne	r2,zero,8a08 <_gp+0xffff6458>
    8a6c:	85a1883a 	add	r16,r16,r22
    8a70:	e02d883a 	mov	r22,fp
    8a74:	00001106 	br	8abc <___vfprintf_internal_r+0x4e4>
    8a78:	00c00044 	movi	r3,1
    8a7c:	04ffffc4 	movi	r19,-1
    8a80:	d8000e15 	stw	zero,56(sp)
    8a84:	d8c00a15 	stw	r3,40(sp)
    8a88:	05400284 	movi	r21,10
    8a8c:	9825883a 	mov	r18,r19
    8a90:	d8000c15 	stw	zero,48(sp)
    8a94:	d8000b15 	stw	zero,44(sp)
    8a98:	182f883a 	mov	r23,r3
    8a9c:	00000806 	br	8ac0 <___vfprintf_internal_r+0x4e8>
    8aa0:	ddc00b15 	stw	r23,44(sp)
    8aa4:	05c00084 	movi	r23,2
    8aa8:	00000506 	br	8ac0 <___vfprintf_internal_r+0x4e8>
    8aac:	00c00044 	movi	r3,1
    8ab0:	d8c00c15 	stw	r3,48(sp)
    8ab4:	05c000c4 	movi	r23,3
    8ab8:	00000106 	br	8ac0 <___vfprintf_internal_r+0x4e8>
    8abc:	002f883a 	mov	r23,zero
    8ac0:	d8c00f17 	ldw	r3,60(sp)
    8ac4:	18c00044 	addi	r3,r3,1
    8ac8:	d8c00f15 	stw	r3,60(sp)
    8acc:	003edc06 	br	8640 <_gp+0xffff6090>
    8ad0:	8005883a 	mov	r2,r16
    8ad4:	dfc01a17 	ldw	ra,104(sp)
    8ad8:	df001917 	ldw	fp,100(sp)
    8adc:	ddc01817 	ldw	r23,96(sp)
    8ae0:	dd801717 	ldw	r22,92(sp)
    8ae4:	dd401617 	ldw	r21,88(sp)
    8ae8:	dd001517 	ldw	r20,84(sp)
    8aec:	dcc01417 	ldw	r19,80(sp)
    8af0:	dc801317 	ldw	r18,76(sp)
    8af4:	dc401217 	ldw	r17,72(sp)
    8af8:	dc001117 	ldw	r16,68(sp)
    8afc:	dec01b04 	addi	sp,sp,108
    8b00:	f800283a 	ret

00008b04 <__vfprintf_internal>:
    8b04:	00800074 	movhi	r2,1
    8b08:	10a96d04 	addi	r2,r2,-23116
    8b0c:	300f883a 	mov	r7,r6
    8b10:	280d883a 	mov	r6,r5
    8b14:	200b883a 	mov	r5,r4
    8b18:	11000017 	ldw	r4,0(r2)
    8b1c:	00085d81 	jmpi	85d8 <___vfprintf_internal_r>

00008b20 <__sfvwrite_small_dev>:
    8b20:	2880000b 	ldhu	r2,0(r5)
    8b24:	1080020c 	andi	r2,r2,8
    8b28:	10002126 	beq	r2,zero,8bb0 <__sfvwrite_small_dev+0x90>
    8b2c:	2880008f 	ldh	r2,2(r5)
    8b30:	defffa04 	addi	sp,sp,-24
    8b34:	dc000015 	stw	r16,0(sp)
    8b38:	dfc00515 	stw	ra,20(sp)
    8b3c:	dd000415 	stw	r20,16(sp)
    8b40:	dcc00315 	stw	r19,12(sp)
    8b44:	dc800215 	stw	r18,8(sp)
    8b48:	dc400115 	stw	r17,4(sp)
    8b4c:	2821883a 	mov	r16,r5
    8b50:	10001216 	blt	r2,zero,8b9c <__sfvwrite_small_dev+0x7c>
    8b54:	2027883a 	mov	r19,r4
    8b58:	3025883a 	mov	r18,r6
    8b5c:	3823883a 	mov	r17,r7
    8b60:	05010004 	movi	r20,1024
    8b64:	04400b0e 	bge	zero,r17,8b94 <__sfvwrite_small_dev+0x74>
    8b68:	880f883a 	mov	r7,r17
    8b6c:	a440010e 	bge	r20,r17,8b74 <__sfvwrite_small_dev+0x54>
    8b70:	01c10004 	movi	r7,1024
    8b74:	8140008f 	ldh	r5,2(r16)
    8b78:	900d883a 	mov	r6,r18
    8b7c:	9809883a 	mov	r4,r19
    8b80:	0008bd80 	call	8bd8 <_write_r>
    8b84:	0080050e 	bge	zero,r2,8b9c <__sfvwrite_small_dev+0x7c>
    8b88:	88a3c83a 	sub	r17,r17,r2
    8b8c:	90a5883a 	add	r18,r18,r2
    8b90:	003ff406 	br	8b64 <_gp+0xffff65b4>
    8b94:	0005883a 	mov	r2,zero
    8b98:	00000706 	br	8bb8 <__sfvwrite_small_dev+0x98>
    8b9c:	8080000b 	ldhu	r2,0(r16)
    8ba0:	10801014 	ori	r2,r2,64
    8ba4:	8080000d 	sth	r2,0(r16)
    8ba8:	00bfffc4 	movi	r2,-1
    8bac:	00000206 	br	8bb8 <__sfvwrite_small_dev+0x98>
    8bb0:	00bfffc4 	movi	r2,-1
    8bb4:	f800283a 	ret
    8bb8:	dfc00517 	ldw	ra,20(sp)
    8bbc:	dd000417 	ldw	r20,16(sp)
    8bc0:	dcc00317 	ldw	r19,12(sp)
    8bc4:	dc800217 	ldw	r18,8(sp)
    8bc8:	dc400117 	ldw	r17,4(sp)
    8bcc:	dc000017 	ldw	r16,0(sp)
    8bd0:	dec00604 	addi	sp,sp,24
    8bd4:	f800283a 	ret

00008bd8 <_write_r>:
    8bd8:	defffd04 	addi	sp,sp,-12
    8bdc:	dc000015 	stw	r16,0(sp)
    8be0:	04000074 	movhi	r16,1
    8be4:	dc400115 	stw	r17,4(sp)
    8be8:	842a2904 	addi	r16,r16,-22364
    8bec:	2023883a 	mov	r17,r4
    8bf0:	2809883a 	mov	r4,r5
    8bf4:	300b883a 	mov	r5,r6
    8bf8:	380d883a 	mov	r6,r7
    8bfc:	dfc00215 	stw	ra,8(sp)
    8c00:	80000015 	stw	zero,0(r16)
    8c04:	0008fb00 	call	8fb0 <write>
    8c08:	00ffffc4 	movi	r3,-1
    8c0c:	10c0031e 	bne	r2,r3,8c1c <_write_r+0x44>
    8c10:	80c00017 	ldw	r3,0(r16)
    8c14:	18000126 	beq	r3,zero,8c1c <_write_r+0x44>
    8c18:	88c00015 	stw	r3,0(r17)
    8c1c:	dfc00217 	ldw	ra,8(sp)
    8c20:	dc400117 	ldw	r17,4(sp)
    8c24:	dc000017 	ldw	r16,0(sp)
    8c28:	dec00304 	addi	sp,sp,12
    8c2c:	f800283a 	ret

00008c30 <__divsi3>:
    8c30:	20001b16 	blt	r4,zero,8ca0 <__divsi3+0x70>
    8c34:	000f883a 	mov	r7,zero
    8c38:	28001616 	blt	r5,zero,8c94 <__divsi3+0x64>
    8c3c:	200d883a 	mov	r6,r4
    8c40:	29001a2e 	bgeu	r5,r4,8cac <__divsi3+0x7c>
    8c44:	00800804 	movi	r2,32
    8c48:	00c00044 	movi	r3,1
    8c4c:	00000106 	br	8c54 <__divsi3+0x24>
    8c50:	10000d26 	beq	r2,zero,8c88 <__divsi3+0x58>
    8c54:	294b883a 	add	r5,r5,r5
    8c58:	10bfffc4 	addi	r2,r2,-1
    8c5c:	18c7883a 	add	r3,r3,r3
    8c60:	293ffb36 	bltu	r5,r4,8c50 <_gp+0xffff66a0>
    8c64:	0005883a 	mov	r2,zero
    8c68:	18000726 	beq	r3,zero,8c88 <__divsi3+0x58>
    8c6c:	0005883a 	mov	r2,zero
    8c70:	31400236 	bltu	r6,r5,8c7c <__divsi3+0x4c>
    8c74:	314dc83a 	sub	r6,r6,r5
    8c78:	10c4b03a 	or	r2,r2,r3
    8c7c:	1806d07a 	srli	r3,r3,1
    8c80:	280ad07a 	srli	r5,r5,1
    8c84:	183ffa1e 	bne	r3,zero,8c70 <_gp+0xffff66c0>
    8c88:	38000126 	beq	r7,zero,8c90 <__divsi3+0x60>
    8c8c:	0085c83a 	sub	r2,zero,r2
    8c90:	f800283a 	ret
    8c94:	014bc83a 	sub	r5,zero,r5
    8c98:	39c0005c 	xori	r7,r7,1
    8c9c:	003fe706 	br	8c3c <_gp+0xffff668c>
    8ca0:	0109c83a 	sub	r4,zero,r4
    8ca4:	01c00044 	movi	r7,1
    8ca8:	003fe306 	br	8c38 <_gp+0xffff6688>
    8cac:	00c00044 	movi	r3,1
    8cb0:	003fee06 	br	8c6c <_gp+0xffff66bc>

00008cb4 <__modsi3>:
    8cb4:	20001716 	blt	r4,zero,8d14 <__modsi3+0x60>
    8cb8:	000f883a 	mov	r7,zero
    8cbc:	2005883a 	mov	r2,r4
    8cc0:	28001216 	blt	r5,zero,8d0c <__modsi3+0x58>
    8cc4:	2900162e 	bgeu	r5,r4,8d20 <__modsi3+0x6c>
    8cc8:	01800804 	movi	r6,32
    8ccc:	00c00044 	movi	r3,1
    8cd0:	00000106 	br	8cd8 <__modsi3+0x24>
    8cd4:	30000a26 	beq	r6,zero,8d00 <__modsi3+0x4c>
    8cd8:	294b883a 	add	r5,r5,r5
    8cdc:	31bfffc4 	addi	r6,r6,-1
    8ce0:	18c7883a 	add	r3,r3,r3
    8ce4:	293ffb36 	bltu	r5,r4,8cd4 <_gp+0xffff6724>
    8ce8:	18000526 	beq	r3,zero,8d00 <__modsi3+0x4c>
    8cec:	1806d07a 	srli	r3,r3,1
    8cf0:	11400136 	bltu	r2,r5,8cf8 <__modsi3+0x44>
    8cf4:	1145c83a 	sub	r2,r2,r5
    8cf8:	280ad07a 	srli	r5,r5,1
    8cfc:	183ffb1e 	bne	r3,zero,8cec <_gp+0xffff673c>
    8d00:	38000126 	beq	r7,zero,8d08 <__modsi3+0x54>
    8d04:	0085c83a 	sub	r2,zero,r2
    8d08:	f800283a 	ret
    8d0c:	014bc83a 	sub	r5,zero,r5
    8d10:	003fec06 	br	8cc4 <_gp+0xffff6714>
    8d14:	0109c83a 	sub	r4,zero,r4
    8d18:	01c00044 	movi	r7,1
    8d1c:	003fe706 	br	8cbc <_gp+0xffff670c>
    8d20:	00c00044 	movi	r3,1
    8d24:	003ff106 	br	8cec <_gp+0xffff673c>

00008d28 <__udivsi3>:
    8d28:	200d883a 	mov	r6,r4
    8d2c:	2900152e 	bgeu	r5,r4,8d84 <__udivsi3+0x5c>
    8d30:	28001416 	blt	r5,zero,8d84 <__udivsi3+0x5c>
    8d34:	00800804 	movi	r2,32
    8d38:	00c00044 	movi	r3,1
    8d3c:	00000206 	br	8d48 <__udivsi3+0x20>
    8d40:	10000e26 	beq	r2,zero,8d7c <__udivsi3+0x54>
    8d44:	28000516 	blt	r5,zero,8d5c <__udivsi3+0x34>
    8d48:	294b883a 	add	r5,r5,r5
    8d4c:	10bfffc4 	addi	r2,r2,-1
    8d50:	18c7883a 	add	r3,r3,r3
    8d54:	293ffa36 	bltu	r5,r4,8d40 <_gp+0xffff6790>
    8d58:	18000826 	beq	r3,zero,8d7c <__udivsi3+0x54>
    8d5c:	0005883a 	mov	r2,zero
    8d60:	31400236 	bltu	r6,r5,8d6c <__udivsi3+0x44>
    8d64:	314dc83a 	sub	r6,r6,r5
    8d68:	10c4b03a 	or	r2,r2,r3
    8d6c:	1806d07a 	srli	r3,r3,1
    8d70:	280ad07a 	srli	r5,r5,1
    8d74:	183ffa1e 	bne	r3,zero,8d60 <_gp+0xffff67b0>
    8d78:	f800283a 	ret
    8d7c:	0005883a 	mov	r2,zero
    8d80:	f800283a 	ret
    8d84:	00c00044 	movi	r3,1
    8d88:	003ff406 	br	8d5c <_gp+0xffff67ac>

00008d8c <__umodsi3>:
    8d8c:	2005883a 	mov	r2,r4
    8d90:	2900122e 	bgeu	r5,r4,8ddc <__umodsi3+0x50>
    8d94:	28001116 	blt	r5,zero,8ddc <__umodsi3+0x50>
    8d98:	01800804 	movi	r6,32
    8d9c:	00c00044 	movi	r3,1
    8da0:	00000206 	br	8dac <__umodsi3+0x20>
    8da4:	30000c26 	beq	r6,zero,8dd8 <__umodsi3+0x4c>
    8da8:	28000516 	blt	r5,zero,8dc0 <__umodsi3+0x34>
    8dac:	294b883a 	add	r5,r5,r5
    8db0:	31bfffc4 	addi	r6,r6,-1
    8db4:	18c7883a 	add	r3,r3,r3
    8db8:	293ffa36 	bltu	r5,r4,8da4 <_gp+0xffff67f4>
    8dbc:	18000626 	beq	r3,zero,8dd8 <__umodsi3+0x4c>
    8dc0:	1806d07a 	srli	r3,r3,1
    8dc4:	11400136 	bltu	r2,r5,8dcc <__umodsi3+0x40>
    8dc8:	1145c83a 	sub	r2,r2,r5
    8dcc:	280ad07a 	srli	r5,r5,1
    8dd0:	183ffb1e 	bne	r3,zero,8dc0 <_gp+0xffff6810>
    8dd4:	f800283a 	ret
    8dd8:	f800283a 	ret
    8ddc:	00c00044 	movi	r3,1
    8de0:	003ff706 	br	8dc0 <_gp+0xffff6810>

00008de4 <__mulsi3>:
    8de4:	0005883a 	mov	r2,zero
    8de8:	20000726 	beq	r4,zero,8e08 <__mulsi3+0x24>
    8dec:	20c0004c 	andi	r3,r4,1
    8df0:	2008d07a 	srli	r4,r4,1
    8df4:	18000126 	beq	r3,zero,8dfc <__mulsi3+0x18>
    8df8:	1145883a 	add	r2,r2,r5
    8dfc:	294b883a 	add	r5,r5,r5
    8e00:	203ffa1e 	bne	r4,zero,8dec <_gp+0xffff683c>
    8e04:	f800283a 	ret
    8e08:	f800283a 	ret

00008e0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8e0c:	defffc04 	addi	sp,sp,-16
    8e10:	df000315 	stw	fp,12(sp)
    8e14:	df000304 	addi	fp,sp,12
    8e18:	e13ffd15 	stw	r4,-12(fp)
    8e1c:	e17ffe15 	stw	r5,-8(fp)
    8e20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8e24:	e0fffe17 	ldw	r3,-8(fp)
    8e28:	e0bffd17 	ldw	r2,-12(fp)
    8e2c:	18800c26 	beq	r3,r2,8e60 <alt_load_section+0x54>
  {
    while( to != end )
    8e30:	00000806 	br	8e54 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8e34:	e0bffe17 	ldw	r2,-8(fp)
    8e38:	10c00104 	addi	r3,r2,4
    8e3c:	e0fffe15 	stw	r3,-8(fp)
    8e40:	e0fffd17 	ldw	r3,-12(fp)
    8e44:	19000104 	addi	r4,r3,4
    8e48:	e13ffd15 	stw	r4,-12(fp)
    8e4c:	18c00017 	ldw	r3,0(r3)
    8e50:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8e54:	e0fffe17 	ldw	r3,-8(fp)
    8e58:	e0bfff17 	ldw	r2,-4(fp)
    8e5c:	18bff51e 	bne	r3,r2,8e34 <_gp+0xffff6884>
    {
      *to++ = *from++;
    }
  }
}
    8e60:	0001883a 	nop
    8e64:	e037883a 	mov	sp,fp
    8e68:	df000017 	ldw	fp,0(sp)
    8e6c:	dec00104 	addi	sp,sp,4
    8e70:	f800283a 	ret

00008e74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8e74:	defffe04 	addi	sp,sp,-8
    8e78:	dfc00115 	stw	ra,4(sp)
    8e7c:	df000015 	stw	fp,0(sp)
    8e80:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8e84:	01800074 	movhi	r6,1
    8e88:	31a97404 	addi	r6,r6,-23088
    8e8c:	01400074 	movhi	r5,1
    8e90:	2968bf04 	addi	r5,r5,-23812
    8e94:	01000074 	movhi	r4,1
    8e98:	21297404 	addi	r4,r4,-23088
    8e9c:	0008e0c0 	call	8e0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8ea0:	01800074 	movhi	r6,1
    8ea4:	31a00804 	addi	r6,r6,-32736
    8ea8:	01400074 	movhi	r5,1
    8eac:	29600804 	addi	r5,r5,-32736
    8eb0:	01000074 	movhi	r4,1
    8eb4:	21200804 	addi	r4,r4,-32736
    8eb8:	0008e0c0 	call	8e0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8ebc:	01800074 	movhi	r6,1
    8ec0:	31a8bf04 	addi	r6,r6,-23812
    8ec4:	01400074 	movhi	r5,1
    8ec8:	29684604 	addi	r5,r5,-24296
    8ecc:	01000074 	movhi	r4,1
    8ed0:	21284604 	addi	r4,r4,-24296
    8ed4:	0008e0c0 	call	8e0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8ed8:	00094a40 	call	94a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8edc:	00096900 	call	9690 <alt_icache_flush_all>
}
    8ee0:	0001883a 	nop
    8ee4:	e037883a 	mov	sp,fp
    8ee8:	dfc00117 	ldw	ra,4(sp)
    8eec:	df000017 	ldw	fp,0(sp)
    8ef0:	dec00204 	addi	sp,sp,8
    8ef4:	f800283a 	ret

00008ef8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ef8:	defffd04 	addi	sp,sp,-12
    8efc:	dfc00215 	stw	ra,8(sp)
    8f00:	df000115 	stw	fp,4(sp)
    8f04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8f08:	0009883a 	mov	r4,zero
    8f0c:	00090e40 	call	90e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8f10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8f14:	000911c0 	call	911c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8f18:	01800074 	movhi	r6,1
    8f1c:	31a8b204 	addi	r6,r6,-23864
    8f20:	01400074 	movhi	r5,1
    8f24:	2968b204 	addi	r5,r5,-23864
    8f28:	01000074 	movhi	r4,1
    8f2c:	2128b204 	addi	r4,r4,-23864
    8f30:	00097940 	call	9794 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8f34:	00095d00 	call	95d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8f38:	01000074 	movhi	r4,1
    8f3c:	21258c04 	addi	r4,r4,-27088
    8f40:	0009d980 	call	9d98 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8f44:	d0a0be17 	ldw	r2,-32008(gp)
    8f48:	d0e0bf17 	ldw	r3,-32004(gp)
    8f4c:	d120c017 	ldw	r4,-32000(gp)
    8f50:	200d883a 	mov	r6,r4
    8f54:	180b883a 	mov	r5,r3
    8f58:	1009883a 	mov	r4,r2
    8f5c:	00083f80 	call	83f8 <main>
    8f60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8f64:	01000044 	movi	r4,1
    8f68:	00093cc0 	call	93cc <close>
  exit (result);
    8f6c:	e13fff17 	ldw	r4,-4(fp)
    8f70:	0009dac0 	call	9dac <exit>

00008f74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8f74:	defffe04 	addi	sp,sp,-8
    8f78:	dfc00115 	stw	ra,4(sp)
    8f7c:	df000015 	stw	fp,0(sp)
    8f80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8f84:	d0a00717 	ldw	r2,-32740(gp)
    8f88:	10000326 	beq	r2,zero,8f98 <alt_get_errno+0x24>
    8f8c:	d0a00717 	ldw	r2,-32740(gp)
    8f90:	103ee83a 	callr	r2
    8f94:	00000106 	br	8f9c <alt_get_errno+0x28>
    8f98:	d0a0bd04 	addi	r2,gp,-32012
}
    8f9c:	e037883a 	mov	sp,fp
    8fa0:	dfc00117 	ldw	ra,4(sp)
    8fa4:	df000017 	ldw	fp,0(sp)
    8fa8:	dec00204 	addi	sp,sp,8
    8fac:	f800283a 	ret

00008fb0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8fb0:	defff904 	addi	sp,sp,-28
    8fb4:	dfc00615 	stw	ra,24(sp)
    8fb8:	df000515 	stw	fp,20(sp)
    8fbc:	df000504 	addi	fp,sp,20
    8fc0:	e13ffd15 	stw	r4,-12(fp)
    8fc4:	e17ffe15 	stw	r5,-8(fp)
    8fc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8fcc:	e0bffd17 	ldw	r2,-12(fp)
    8fd0:	10000816 	blt	r2,zero,8ff4 <write+0x44>
    8fd4:	01400304 	movi	r5,12
    8fd8:	e13ffd17 	ldw	r4,-12(fp)
    8fdc:	0008de40 	call	8de4 <__mulsi3>
    8fe0:	1007883a 	mov	r3,r2
    8fe4:	00800074 	movhi	r2,1
    8fe8:	10a90c04 	addi	r2,r2,-23504
    8fec:	1885883a 	add	r2,r3,r2
    8ff0:	00000106 	br	8ff8 <write+0x48>
    8ff4:	0005883a 	mov	r2,zero
    8ff8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8ffc:	e0bffb17 	ldw	r2,-20(fp)
    9000:	10002126 	beq	r2,zero,9088 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9004:	e0bffb17 	ldw	r2,-20(fp)
    9008:	10800217 	ldw	r2,8(r2)
    900c:	108000cc 	andi	r2,r2,3
    9010:	10001826 	beq	r2,zero,9074 <write+0xc4>
    9014:	e0bffb17 	ldw	r2,-20(fp)
    9018:	10800017 	ldw	r2,0(r2)
    901c:	10800617 	ldw	r2,24(r2)
    9020:	10001426 	beq	r2,zero,9074 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9024:	e0bffb17 	ldw	r2,-20(fp)
    9028:	10800017 	ldw	r2,0(r2)
    902c:	10800617 	ldw	r2,24(r2)
    9030:	e0ffff17 	ldw	r3,-4(fp)
    9034:	180d883a 	mov	r6,r3
    9038:	e17ffe17 	ldw	r5,-8(fp)
    903c:	e13ffb17 	ldw	r4,-20(fp)
    9040:	103ee83a 	callr	r2
    9044:	e0bffc15 	stw	r2,-16(fp)
    9048:	e0bffc17 	ldw	r2,-16(fp)
    904c:	1000070e 	bge	r2,zero,906c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    9050:	0008f740 	call	8f74 <alt_get_errno>
    9054:	1007883a 	mov	r3,r2
    9058:	e0bffc17 	ldw	r2,-16(fp)
    905c:	0085c83a 	sub	r2,zero,r2
    9060:	18800015 	stw	r2,0(r3)
        return -1;
    9064:	00bfffc4 	movi	r2,-1
    9068:	00000c06 	br	909c <write+0xec>
      }
      return rval;
    906c:	e0bffc17 	ldw	r2,-16(fp)
    9070:	00000a06 	br	909c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9074:	0008f740 	call	8f74 <alt_get_errno>
    9078:	1007883a 	mov	r3,r2
    907c:	00800344 	movi	r2,13
    9080:	18800015 	stw	r2,0(r3)
    9084:	00000406 	br	9098 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9088:	0008f740 	call	8f74 <alt_get_errno>
    908c:	1007883a 	mov	r3,r2
    9090:	00801444 	movi	r2,81
    9094:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9098:	00bfffc4 	movi	r2,-1
}
    909c:	e037883a 	mov	sp,fp
    90a0:	dfc00117 	ldw	ra,4(sp)
    90a4:	df000017 	ldw	fp,0(sp)
    90a8:	dec00204 	addi	sp,sp,8
    90ac:	f800283a 	ret

000090b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    90b0:	defffd04 	addi	sp,sp,-12
    90b4:	dfc00215 	stw	ra,8(sp)
    90b8:	df000115 	stw	fp,4(sp)
    90bc:	df000104 	addi	fp,sp,4
    90c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    90c4:	d1600404 	addi	r5,gp,-32752
    90c8:	e13fff17 	ldw	r4,-4(fp)
    90cc:	000952c0 	call	952c <alt_dev_llist_insert>
}
    90d0:	e037883a 	mov	sp,fp
    90d4:	dfc00117 	ldw	ra,4(sp)
    90d8:	df000017 	ldw	fp,0(sp)
    90dc:	dec00204 	addi	sp,sp,8
    90e0:	f800283a 	ret

000090e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    90e4:	defffd04 	addi	sp,sp,-12
    90e8:	dfc00215 	stw	ra,8(sp)
    90ec:	df000115 	stw	fp,4(sp)
    90f0:	df000104 	addi	fp,sp,4
    90f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    90f8:	0009b180 	call	9b18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    90fc:	00800044 	movi	r2,1
    9100:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9104:	0001883a 	nop
    9108:	e037883a 	mov	sp,fp
    910c:	dfc00117 	ldw	ra,4(sp)
    9110:	df000017 	ldw	fp,0(sp)
    9114:	dec00204 	addi	sp,sp,8
    9118:	f800283a 	ret

0000911c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    911c:	defffe04 	addi	sp,sp,-8
    9120:	dfc00115 	stw	ra,4(sp)
    9124:	df000015 	stw	fp,0(sp)
    9128:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    912c:	01000074 	movhi	r4,1
    9130:	2128f704 	addi	r4,r4,-23588
    9134:	00090b00 	call	90b0 <alt_dev_reg>
}
    9138:	0001883a 	nop
    913c:	e037883a 	mov	sp,fp
    9140:	dfc00117 	ldw	ra,4(sp)
    9144:	df000017 	ldw	fp,0(sp)
    9148:	dec00204 	addi	sp,sp,8
    914c:	f800283a 	ret

00009150 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9150:	defffa04 	addi	sp,sp,-24
    9154:	dfc00515 	stw	ra,20(sp)
    9158:	df000415 	stw	fp,16(sp)
    915c:	df000404 	addi	fp,sp,16
    9160:	e13ffd15 	stw	r4,-12(fp)
    9164:	e17ffe15 	stw	r5,-8(fp)
    9168:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    916c:	e0bffd17 	ldw	r2,-12(fp)
    9170:	10800017 	ldw	r2,0(r2)
    9174:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9178:	e0bffc17 	ldw	r2,-16(fp)
    917c:	10c00a04 	addi	r3,r2,40
    9180:	e0bffd17 	ldw	r2,-12(fp)
    9184:	10800217 	ldw	r2,8(r2)
    9188:	100f883a 	mov	r7,r2
    918c:	e1bfff17 	ldw	r6,-4(fp)
    9190:	e17ffe17 	ldw	r5,-8(fp)
    9194:	1809883a 	mov	r4,r3
    9198:	00092100 	call	9210 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    919c:	e037883a 	mov	sp,fp
    91a0:	dfc00117 	ldw	ra,4(sp)
    91a4:	df000017 	ldw	fp,0(sp)
    91a8:	dec00204 	addi	sp,sp,8
    91ac:	f800283a 	ret

000091b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    91b0:	defffa04 	addi	sp,sp,-24
    91b4:	dfc00515 	stw	ra,20(sp)
    91b8:	df000415 	stw	fp,16(sp)
    91bc:	df000404 	addi	fp,sp,16
    91c0:	e13ffd15 	stw	r4,-12(fp)
    91c4:	e17ffe15 	stw	r5,-8(fp)
    91c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    91cc:	e0bffd17 	ldw	r2,-12(fp)
    91d0:	10800017 	ldw	r2,0(r2)
    91d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    91d8:	e0bffc17 	ldw	r2,-16(fp)
    91dc:	10c00a04 	addi	r3,r2,40
    91e0:	e0bffd17 	ldw	r2,-12(fp)
    91e4:	10800217 	ldw	r2,8(r2)
    91e8:	100f883a 	mov	r7,r2
    91ec:	e1bfff17 	ldw	r6,-4(fp)
    91f0:	e17ffe17 	ldw	r5,-8(fp)
    91f4:	1809883a 	mov	r4,r3
    91f8:	00092fc0 	call	92fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    91fc:	e037883a 	mov	sp,fp
    9200:	dfc00117 	ldw	ra,4(sp)
    9204:	df000017 	ldw	fp,0(sp)
    9208:	dec00204 	addi	sp,sp,8
    920c:	f800283a 	ret

00009210 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9210:	defff704 	addi	sp,sp,-36
    9214:	df000815 	stw	fp,32(sp)
    9218:	df000804 	addi	fp,sp,32
    921c:	e13ffc15 	stw	r4,-16(fp)
    9220:	e17ffd15 	stw	r5,-12(fp)
    9224:	e1bffe15 	stw	r6,-8(fp)
    9228:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	10800017 	ldw	r2,0(r2)
    9234:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9238:	e0bffd17 	ldw	r2,-12(fp)
    923c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9240:	e0bffe17 	ldw	r2,-8(fp)
    9244:	e0fffd17 	ldw	r3,-12(fp)
    9248:	1885883a 	add	r2,r3,r2
    924c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9250:	00001206 	br	929c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9254:	e0bff917 	ldw	r2,-28(fp)
    9258:	10800037 	ldwio	r2,0(r2)
    925c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9260:	e0bffb17 	ldw	r2,-20(fp)
    9264:	10a0000c 	andi	r2,r2,32768
    9268:	10000626 	beq	r2,zero,9284 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    926c:	e0bff817 	ldw	r2,-32(fp)
    9270:	10c00044 	addi	r3,r2,1
    9274:	e0fff815 	stw	r3,-32(fp)
    9278:	e0fffb17 	ldw	r3,-20(fp)
    927c:	10c00005 	stb	r3,0(r2)
    9280:	00000606 	br	929c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9284:	e0fff817 	ldw	r3,-32(fp)
    9288:	e0bffd17 	ldw	r2,-12(fp)
    928c:	1880071e 	bne	r3,r2,92ac <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9290:	e0bfff17 	ldw	r2,-4(fp)
    9294:	1090000c 	andi	r2,r2,16384
    9298:	1000061e 	bne	r2,zero,92b4 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    929c:	e0fff817 	ldw	r3,-32(fp)
    92a0:	e0bffa17 	ldw	r2,-24(fp)
    92a4:	18bfeb36 	bltu	r3,r2,9254 <_gp+0xffff6ca4>
    92a8:	00000306 	br	92b8 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    92ac:	0001883a 	nop
    92b0:	00000106 	br	92b8 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    92b4:	0001883a 	nop
    
  }

  if (ptr != buffer)
    92b8:	e0fff817 	ldw	r3,-32(fp)
    92bc:	e0bffd17 	ldw	r2,-12(fp)
    92c0:	18800426 	beq	r3,r2,92d4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    92c4:	e0fff817 	ldw	r3,-32(fp)
    92c8:	e0bffd17 	ldw	r2,-12(fp)
    92cc:	1885c83a 	sub	r2,r3,r2
    92d0:	00000606 	br	92ec <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    92d4:	e0bfff17 	ldw	r2,-4(fp)
    92d8:	1090000c 	andi	r2,r2,16384
    92dc:	10000226 	beq	r2,zero,92e8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    92e0:	00bffd44 	movi	r2,-11
    92e4:	00000106 	br	92ec <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    92e8:	00bffec4 	movi	r2,-5
}
    92ec:	e037883a 	mov	sp,fp
    92f0:	df000017 	ldw	fp,0(sp)
    92f4:	dec00104 	addi	sp,sp,4
    92f8:	f800283a 	ret

000092fc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    92fc:	defff904 	addi	sp,sp,-28
    9300:	df000615 	stw	fp,24(sp)
    9304:	df000604 	addi	fp,sp,24
    9308:	e13ffc15 	stw	r4,-16(fp)
    930c:	e17ffd15 	stw	r5,-12(fp)
    9310:	e1bffe15 	stw	r6,-8(fp)
    9314:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9318:	e0bffc17 	ldw	r2,-16(fp)
    931c:	10800017 	ldw	r2,0(r2)
    9320:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9324:	e0bffe17 	ldw	r2,-8(fp)
    9328:	e0fffd17 	ldw	r3,-12(fp)
    932c:	1885883a 	add	r2,r3,r2
    9330:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9334:	00000e06 	br	9370 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9338:	e0bffa17 	ldw	r2,-24(fp)
    933c:	10800104 	addi	r2,r2,4
    9340:	10800037 	ldwio	r2,0(r2)
    9344:	10bfffec 	andhi	r2,r2,65535
    9348:	10000926 	beq	r2,zero,9370 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    934c:	e0fffa17 	ldw	r3,-24(fp)
    9350:	e0bffd17 	ldw	r2,-12(fp)
    9354:	11000044 	addi	r4,r2,1
    9358:	e13ffd15 	stw	r4,-12(fp)
    935c:	10800003 	ldbu	r2,0(r2)
    9360:	10803fcc 	andi	r2,r2,255
    9364:	1080201c 	xori	r2,r2,128
    9368:	10bfe004 	addi	r2,r2,-128
    936c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9370:	e0fffd17 	ldw	r3,-12(fp)
    9374:	e0bffb17 	ldw	r2,-20(fp)
    9378:	18bfef36 	bltu	r3,r2,9338 <_gp+0xffff6d88>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    937c:	e0bffe17 	ldw	r2,-8(fp)
}
    9380:	e037883a 	mov	sp,fp
    9384:	df000017 	ldw	fp,0(sp)
    9388:	dec00104 	addi	sp,sp,4
    938c:	f800283a 	ret

00009390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9390:	defffe04 	addi	sp,sp,-8
    9394:	dfc00115 	stw	ra,4(sp)
    9398:	df000015 	stw	fp,0(sp)
    939c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    93a0:	d0a00717 	ldw	r2,-32740(gp)
    93a4:	10000326 	beq	r2,zero,93b4 <alt_get_errno+0x24>
    93a8:	d0a00717 	ldw	r2,-32740(gp)
    93ac:	103ee83a 	callr	r2
    93b0:	00000106 	br	93b8 <alt_get_errno+0x28>
    93b4:	d0a0bd04 	addi	r2,gp,-32012
}
    93b8:	e037883a 	mov	sp,fp
    93bc:	dfc00117 	ldw	ra,4(sp)
    93c0:	df000017 	ldw	fp,0(sp)
    93c4:	dec00204 	addi	sp,sp,8
    93c8:	f800283a 	ret

000093cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    93cc:	defffb04 	addi	sp,sp,-20
    93d0:	dfc00415 	stw	ra,16(sp)
    93d4:	df000315 	stw	fp,12(sp)
    93d8:	df000304 	addi	fp,sp,12
    93dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    93e0:	e0bfff17 	ldw	r2,-4(fp)
    93e4:	10000816 	blt	r2,zero,9408 <close+0x3c>
    93e8:	01400304 	movi	r5,12
    93ec:	e13fff17 	ldw	r4,-4(fp)
    93f0:	0008de40 	call	8de4 <__mulsi3>
    93f4:	1007883a 	mov	r3,r2
    93f8:	00800074 	movhi	r2,1
    93fc:	10a90c04 	addi	r2,r2,-23504
    9400:	1885883a 	add	r2,r3,r2
    9404:	00000106 	br	940c <close+0x40>
    9408:	0005883a 	mov	r2,zero
    940c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9410:	e0bffd17 	ldw	r2,-12(fp)
    9414:	10001926 	beq	r2,zero,947c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9418:	e0bffd17 	ldw	r2,-12(fp)
    941c:	10800017 	ldw	r2,0(r2)
    9420:	10800417 	ldw	r2,16(r2)
    9424:	10000626 	beq	r2,zero,9440 <close+0x74>
    9428:	e0bffd17 	ldw	r2,-12(fp)
    942c:	10800017 	ldw	r2,0(r2)
    9430:	10800417 	ldw	r2,16(r2)
    9434:	e13ffd17 	ldw	r4,-12(fp)
    9438:	103ee83a 	callr	r2
    943c:	00000106 	br	9444 <close+0x78>
    9440:	0005883a 	mov	r2,zero
    9444:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9448:	e13fff17 	ldw	r4,-4(fp)
    944c:	0009a940 	call	9a94 <alt_release_fd>
    if (rval < 0)
    9450:	e0bffe17 	ldw	r2,-8(fp)
    9454:	1000070e 	bge	r2,zero,9474 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9458:	00093900 	call	9390 <alt_get_errno>
    945c:	1007883a 	mov	r3,r2
    9460:	e0bffe17 	ldw	r2,-8(fp)
    9464:	0085c83a 	sub	r2,zero,r2
    9468:	18800015 	stw	r2,0(r3)
      return -1;
    946c:	00bfffc4 	movi	r2,-1
    9470:	00000706 	br	9490 <close+0xc4>
    }
    return 0;
    9474:	0005883a 	mov	r2,zero
    9478:	00000506 	br	9490 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    947c:	00093900 	call	9390 <alt_get_errno>
    9480:	1007883a 	mov	r3,r2
    9484:	00801444 	movi	r2,81
    9488:	18800015 	stw	r2,0(r3)
    return -1;
    948c:	00bfffc4 	movi	r2,-1
  }
}
    9490:	e037883a 	mov	sp,fp
    9494:	dfc00117 	ldw	ra,4(sp)
    9498:	df000017 	ldw	fp,0(sp)
    949c:	dec00204 	addi	sp,sp,8
    94a0:	f800283a 	ret

000094a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    94a4:	deffff04 	addi	sp,sp,-4
    94a8:	df000015 	stw	fp,0(sp)
    94ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    94b0:	0001883a 	nop
    94b4:	e037883a 	mov	sp,fp
    94b8:	df000017 	ldw	fp,0(sp)
    94bc:	dec00104 	addi	sp,sp,4
    94c0:	f800283a 	ret

000094c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    94c4:	defffc04 	addi	sp,sp,-16
    94c8:	df000315 	stw	fp,12(sp)
    94cc:	df000304 	addi	fp,sp,12
    94d0:	e13ffd15 	stw	r4,-12(fp)
    94d4:	e17ffe15 	stw	r5,-8(fp)
    94d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    94dc:	e0bfff17 	ldw	r2,-4(fp)
}
    94e0:	e037883a 	mov	sp,fp
    94e4:	df000017 	ldw	fp,0(sp)
    94e8:	dec00104 	addi	sp,sp,4
    94ec:	f800283a 	ret

000094f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    94f0:	defffe04 	addi	sp,sp,-8
    94f4:	dfc00115 	stw	ra,4(sp)
    94f8:	df000015 	stw	fp,0(sp)
    94fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9500:	d0a00717 	ldw	r2,-32740(gp)
    9504:	10000326 	beq	r2,zero,9514 <alt_get_errno+0x24>
    9508:	d0a00717 	ldw	r2,-32740(gp)
    950c:	103ee83a 	callr	r2
    9510:	00000106 	br	9518 <alt_get_errno+0x28>
    9514:	d0a0bd04 	addi	r2,gp,-32012
}
    9518:	e037883a 	mov	sp,fp
    951c:	dfc00117 	ldw	ra,4(sp)
    9520:	df000017 	ldw	fp,0(sp)
    9524:	dec00204 	addi	sp,sp,8
    9528:	f800283a 	ret

0000952c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    952c:	defffa04 	addi	sp,sp,-24
    9530:	dfc00515 	stw	ra,20(sp)
    9534:	df000415 	stw	fp,16(sp)
    9538:	df000404 	addi	fp,sp,16
    953c:	e13ffe15 	stw	r4,-8(fp)
    9540:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9544:	e0bffe17 	ldw	r2,-8(fp)
    9548:	10000326 	beq	r2,zero,9558 <alt_dev_llist_insert+0x2c>
    954c:	e0bffe17 	ldw	r2,-8(fp)
    9550:	10800217 	ldw	r2,8(r2)
    9554:	1000061e 	bne	r2,zero,9570 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9558:	00094f00 	call	94f0 <alt_get_errno>
    955c:	1007883a 	mov	r3,r2
    9560:	00800584 	movi	r2,22
    9564:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9568:	00bffa84 	movi	r2,-22
    956c:	00001306 	br	95bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9570:	e0bffe17 	ldw	r2,-8(fp)
    9574:	e0ffff17 	ldw	r3,-4(fp)
    9578:	e0fffc15 	stw	r3,-16(fp)
    957c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9580:	e0bffd17 	ldw	r2,-12(fp)
    9584:	e0fffc17 	ldw	r3,-16(fp)
    9588:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    958c:	e0bffc17 	ldw	r2,-16(fp)
    9590:	10c00017 	ldw	r3,0(r2)
    9594:	e0bffd17 	ldw	r2,-12(fp)
    9598:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    959c:	e0bffc17 	ldw	r2,-16(fp)
    95a0:	10800017 	ldw	r2,0(r2)
    95a4:	e0fffd17 	ldw	r3,-12(fp)
    95a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    95ac:	e0bffc17 	ldw	r2,-16(fp)
    95b0:	e0fffd17 	ldw	r3,-12(fp)
    95b4:	10c00015 	stw	r3,0(r2)

  return 0;  
    95b8:	0005883a 	mov	r2,zero
}
    95bc:	e037883a 	mov	sp,fp
    95c0:	dfc00117 	ldw	ra,4(sp)
    95c4:	df000017 	ldw	fp,0(sp)
    95c8:	dec00204 	addi	sp,sp,8
    95cc:	f800283a 	ret

000095d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    95d0:	defffd04 	addi	sp,sp,-12
    95d4:	dfc00215 	stw	ra,8(sp)
    95d8:	df000115 	stw	fp,4(sp)
    95dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    95e0:	00800074 	movhi	r2,1
    95e4:	10a84504 	addi	r2,r2,-24300
    95e8:	e0bfff15 	stw	r2,-4(fp)
    95ec:	00000606 	br	9608 <_do_ctors+0x38>
        (*ctor) (); 
    95f0:	e0bfff17 	ldw	r2,-4(fp)
    95f4:	10800017 	ldw	r2,0(r2)
    95f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    95fc:	e0bfff17 	ldw	r2,-4(fp)
    9600:	10bfff04 	addi	r2,r2,-4
    9604:	e0bfff15 	stw	r2,-4(fp)
    9608:	e0ffff17 	ldw	r3,-4(fp)
    960c:	00800074 	movhi	r2,1
    9610:	10a84604 	addi	r2,r2,-24296
    9614:	18bff62e 	bgeu	r3,r2,95f0 <_gp+0xffff7040>
        (*ctor) (); 
}
    9618:	0001883a 	nop
    961c:	e037883a 	mov	sp,fp
    9620:	dfc00117 	ldw	ra,4(sp)
    9624:	df000017 	ldw	fp,0(sp)
    9628:	dec00204 	addi	sp,sp,8
    962c:	f800283a 	ret

00009630 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9630:	defffd04 	addi	sp,sp,-12
    9634:	dfc00215 	stw	ra,8(sp)
    9638:	df000115 	stw	fp,4(sp)
    963c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9640:	00800074 	movhi	r2,1
    9644:	10a84504 	addi	r2,r2,-24300
    9648:	e0bfff15 	stw	r2,-4(fp)
    964c:	00000606 	br	9668 <_do_dtors+0x38>
        (*dtor) (); 
    9650:	e0bfff17 	ldw	r2,-4(fp)
    9654:	10800017 	ldw	r2,0(r2)
    9658:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    965c:	e0bfff17 	ldw	r2,-4(fp)
    9660:	10bfff04 	addi	r2,r2,-4
    9664:	e0bfff15 	stw	r2,-4(fp)
    9668:	e0ffff17 	ldw	r3,-4(fp)
    966c:	00800074 	movhi	r2,1
    9670:	10a84604 	addi	r2,r2,-24296
    9674:	18bff62e 	bgeu	r3,r2,9650 <_gp+0xffff70a0>
        (*dtor) (); 
}
    9678:	0001883a 	nop
    967c:	e037883a 	mov	sp,fp
    9680:	dfc00117 	ldw	ra,4(sp)
    9684:	df000017 	ldw	fp,0(sp)
    9688:	dec00204 	addi	sp,sp,8
    968c:	f800283a 	ret

00009690 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9690:	deffff04 	addi	sp,sp,-4
    9694:	df000015 	stw	fp,0(sp)
    9698:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    969c:	0001883a 	nop
    96a0:	e037883a 	mov	sp,fp
    96a4:	df000017 	ldw	fp,0(sp)
    96a8:	dec00104 	addi	sp,sp,4
    96ac:	f800283a 	ret

000096b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    96b0:	defff804 	addi	sp,sp,-32
    96b4:	dfc00715 	stw	ra,28(sp)
    96b8:	df000615 	stw	fp,24(sp)
    96bc:	dc000515 	stw	r16,20(sp)
    96c0:	df000604 	addi	fp,sp,24
    96c4:	e13ffb15 	stw	r4,-20(fp)
    96c8:	e17ffc15 	stw	r5,-16(fp)
    96cc:	e1bffd15 	stw	r6,-12(fp)
    96d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    96d4:	e1bffe17 	ldw	r6,-8(fp)
    96d8:	e17ffd17 	ldw	r5,-12(fp)
    96dc:	e13ffc17 	ldw	r4,-16(fp)
    96e0:	00099380 	call	9938 <open>
    96e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    96e8:	e0bffa17 	ldw	r2,-24(fp)
    96ec:	10002216 	blt	r2,zero,9778 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    96f0:	04000074 	movhi	r16,1
    96f4:	84290c04 	addi	r16,r16,-23504
    96f8:	e0bffa17 	ldw	r2,-24(fp)
    96fc:	01400304 	movi	r5,12
    9700:	1009883a 	mov	r4,r2
    9704:	0008de40 	call	8de4 <__mulsi3>
    9708:	8085883a 	add	r2,r16,r2
    970c:	10c00017 	ldw	r3,0(r2)
    9710:	e0bffb17 	ldw	r2,-20(fp)
    9714:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9718:	04000074 	movhi	r16,1
    971c:	84290c04 	addi	r16,r16,-23504
    9720:	e0bffa17 	ldw	r2,-24(fp)
    9724:	01400304 	movi	r5,12
    9728:	1009883a 	mov	r4,r2
    972c:	0008de40 	call	8de4 <__mulsi3>
    9730:	8085883a 	add	r2,r16,r2
    9734:	10800104 	addi	r2,r2,4
    9738:	10c00017 	ldw	r3,0(r2)
    973c:	e0bffb17 	ldw	r2,-20(fp)
    9740:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9744:	04000074 	movhi	r16,1
    9748:	84290c04 	addi	r16,r16,-23504
    974c:	e0bffa17 	ldw	r2,-24(fp)
    9750:	01400304 	movi	r5,12
    9754:	1009883a 	mov	r4,r2
    9758:	0008de40 	call	8de4 <__mulsi3>
    975c:	8085883a 	add	r2,r16,r2
    9760:	10800204 	addi	r2,r2,8
    9764:	10c00017 	ldw	r3,0(r2)
    9768:	e0bffb17 	ldw	r2,-20(fp)
    976c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9770:	e13ffa17 	ldw	r4,-24(fp)
    9774:	0009a940 	call	9a94 <alt_release_fd>
  }
} 
    9778:	0001883a 	nop
    977c:	e6ffff04 	addi	sp,fp,-4
    9780:	dfc00217 	ldw	ra,8(sp)
    9784:	df000117 	ldw	fp,4(sp)
    9788:	dc000017 	ldw	r16,0(sp)
    978c:	dec00304 	addi	sp,sp,12
    9790:	f800283a 	ret

00009794 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9794:	defffb04 	addi	sp,sp,-20
    9798:	dfc00415 	stw	ra,16(sp)
    979c:	df000315 	stw	fp,12(sp)
    97a0:	df000304 	addi	fp,sp,12
    97a4:	e13ffd15 	stw	r4,-12(fp)
    97a8:	e17ffe15 	stw	r5,-8(fp)
    97ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    97b0:	01c07fc4 	movi	r7,511
    97b4:	01800044 	movi	r6,1
    97b8:	e17ffd17 	ldw	r5,-12(fp)
    97bc:	01000074 	movhi	r4,1
    97c0:	21290f04 	addi	r4,r4,-23492
    97c4:	00096b00 	call	96b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    97c8:	01c07fc4 	movi	r7,511
    97cc:	000d883a 	mov	r6,zero
    97d0:	e17ffe17 	ldw	r5,-8(fp)
    97d4:	01000074 	movhi	r4,1
    97d8:	21290c04 	addi	r4,r4,-23504
    97dc:	00096b00 	call	96b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    97e0:	01c07fc4 	movi	r7,511
    97e4:	01800044 	movi	r6,1
    97e8:	e17fff17 	ldw	r5,-4(fp)
    97ec:	01000074 	movhi	r4,1
    97f0:	21291204 	addi	r4,r4,-23480
    97f4:	00096b00 	call	96b0 <alt_open_fd>
}  
    97f8:	0001883a 	nop
    97fc:	e037883a 	mov	sp,fp
    9800:	dfc00117 	ldw	ra,4(sp)
    9804:	df000017 	ldw	fp,0(sp)
    9808:	dec00204 	addi	sp,sp,8
    980c:	f800283a 	ret

00009810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9810:	defffe04 	addi	sp,sp,-8
    9814:	dfc00115 	stw	ra,4(sp)
    9818:	df000015 	stw	fp,0(sp)
    981c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9820:	d0a00717 	ldw	r2,-32740(gp)
    9824:	10000326 	beq	r2,zero,9834 <alt_get_errno+0x24>
    9828:	d0a00717 	ldw	r2,-32740(gp)
    982c:	103ee83a 	callr	r2
    9830:	00000106 	br	9838 <alt_get_errno+0x28>
    9834:	d0a0bd04 	addi	r2,gp,-32012
}
    9838:	e037883a 	mov	sp,fp
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	df000017 	ldw	fp,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    984c:	defffb04 	addi	sp,sp,-20
    9850:	dfc00415 	stw	ra,16(sp)
    9854:	df000315 	stw	fp,12(sp)
    9858:	dc000215 	stw	r16,8(sp)
    985c:	df000304 	addi	fp,sp,12
    9860:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9864:	e0bffe17 	ldw	r2,-8(fp)
    9868:	10800217 	ldw	r2,8(r2)
    986c:	10d00034 	orhi	r3,r2,16384
    9870:	e0bffe17 	ldw	r2,-8(fp)
    9874:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9878:	e03ffd15 	stw	zero,-12(fp)
    987c:	00002306 	br	990c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9880:	04000074 	movhi	r16,1
    9884:	84290c04 	addi	r16,r16,-23504
    9888:	e0bffd17 	ldw	r2,-12(fp)
    988c:	01400304 	movi	r5,12
    9890:	1009883a 	mov	r4,r2
    9894:	0008de40 	call	8de4 <__mulsi3>
    9898:	8085883a 	add	r2,r16,r2
    989c:	10c00017 	ldw	r3,0(r2)
    98a0:	e0bffe17 	ldw	r2,-8(fp)
    98a4:	10800017 	ldw	r2,0(r2)
    98a8:	1880151e 	bne	r3,r2,9900 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    98ac:	04000074 	movhi	r16,1
    98b0:	84290c04 	addi	r16,r16,-23504
    98b4:	e0bffd17 	ldw	r2,-12(fp)
    98b8:	01400304 	movi	r5,12
    98bc:	1009883a 	mov	r4,r2
    98c0:	0008de40 	call	8de4 <__mulsi3>
    98c4:	8085883a 	add	r2,r16,r2
    98c8:	10800204 	addi	r2,r2,8
    98cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    98d0:	10000b0e 	bge	r2,zero,9900 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    98d4:	01400304 	movi	r5,12
    98d8:	e13ffd17 	ldw	r4,-12(fp)
    98dc:	0008de40 	call	8de4 <__mulsi3>
    98e0:	1007883a 	mov	r3,r2
    98e4:	00800074 	movhi	r2,1
    98e8:	10a90c04 	addi	r2,r2,-23504
    98ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    98f0:	e0bffe17 	ldw	r2,-8(fp)
    98f4:	18800226 	beq	r3,r2,9900 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    98f8:	00bffcc4 	movi	r2,-13
    98fc:	00000806 	br	9920 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9900:	e0bffd17 	ldw	r2,-12(fp)
    9904:	10800044 	addi	r2,r2,1
    9908:	e0bffd15 	stw	r2,-12(fp)
    990c:	d0a00617 	ldw	r2,-32744(gp)
    9910:	1007883a 	mov	r3,r2
    9914:	e0bffd17 	ldw	r2,-12(fp)
    9918:	18bfd92e 	bgeu	r3,r2,9880 <_gp+0xffff72d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    991c:	0005883a 	mov	r2,zero
}
    9920:	e6ffff04 	addi	sp,fp,-4
    9924:	dfc00217 	ldw	ra,8(sp)
    9928:	df000117 	ldw	fp,4(sp)
    992c:	dc000017 	ldw	r16,0(sp)
    9930:	dec00304 	addi	sp,sp,12
    9934:	f800283a 	ret

00009938 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9938:	defff604 	addi	sp,sp,-40
    993c:	dfc00915 	stw	ra,36(sp)
    9940:	df000815 	stw	fp,32(sp)
    9944:	df000804 	addi	fp,sp,32
    9948:	e13ffd15 	stw	r4,-12(fp)
    994c:	e17ffe15 	stw	r5,-8(fp)
    9950:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9954:	00bfffc4 	movi	r2,-1
    9958:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    995c:	00bffb44 	movi	r2,-19
    9960:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9964:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9968:	d1600404 	addi	r5,gp,-32752
    996c:	e13ffd17 	ldw	r4,-12(fp)
    9970:	0009b3c0 	call	9b3c <alt_find_dev>
    9974:	e0bff815 	stw	r2,-32(fp)
    9978:	e0bff817 	ldw	r2,-32(fp)
    997c:	1000051e 	bne	r2,zero,9994 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9980:	e13ffd17 	ldw	r4,-12(fp)
    9984:	0009bcc0 	call	9bcc <alt_find_file>
    9988:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    998c:	00800044 	movi	r2,1
    9990:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9994:	e0bff817 	ldw	r2,-32(fp)
    9998:	10002b26 	beq	r2,zero,9a48 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    999c:	e13ff817 	ldw	r4,-32(fp)
    99a0:	0009cd40 	call	9cd4 <alt_get_fd>
    99a4:	e0bff915 	stw	r2,-28(fp)
    99a8:	e0bff917 	ldw	r2,-28(fp)
    99ac:	1000030e 	bge	r2,zero,99bc <open+0x84>
    {
      status = index;
    99b0:	e0bff917 	ldw	r2,-28(fp)
    99b4:	e0bffa15 	stw	r2,-24(fp)
    99b8:	00002506 	br	9a50 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    99bc:	01400304 	movi	r5,12
    99c0:	e13ff917 	ldw	r4,-28(fp)
    99c4:	0008de40 	call	8de4 <__mulsi3>
    99c8:	1007883a 	mov	r3,r2
    99cc:	00800074 	movhi	r2,1
    99d0:	10a90c04 	addi	r2,r2,-23504
    99d4:	1885883a 	add	r2,r3,r2
    99d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    99dc:	e0fffe17 	ldw	r3,-8(fp)
    99e0:	00900034 	movhi	r2,16384
    99e4:	10bfffc4 	addi	r2,r2,-1
    99e8:	1886703a 	and	r3,r3,r2
    99ec:	e0bffc17 	ldw	r2,-16(fp)
    99f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    99f4:	e0bffb17 	ldw	r2,-20(fp)
    99f8:	1000051e 	bne	r2,zero,9a10 <open+0xd8>
    99fc:	e13ffc17 	ldw	r4,-16(fp)
    9a00:	000984c0 	call	984c <alt_file_locked>
    9a04:	e0bffa15 	stw	r2,-24(fp)
    9a08:	e0bffa17 	ldw	r2,-24(fp)
    9a0c:	10001016 	blt	r2,zero,9a50 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9a10:	e0bff817 	ldw	r2,-32(fp)
    9a14:	10800317 	ldw	r2,12(r2)
    9a18:	10000826 	beq	r2,zero,9a3c <open+0x104>
    9a1c:	e0bff817 	ldw	r2,-32(fp)
    9a20:	10800317 	ldw	r2,12(r2)
    9a24:	e1ffff17 	ldw	r7,-4(fp)
    9a28:	e1bffe17 	ldw	r6,-8(fp)
    9a2c:	e17ffd17 	ldw	r5,-12(fp)
    9a30:	e13ffc17 	ldw	r4,-16(fp)
    9a34:	103ee83a 	callr	r2
    9a38:	00000106 	br	9a40 <open+0x108>
    9a3c:	0005883a 	mov	r2,zero
    9a40:	e0bffa15 	stw	r2,-24(fp)
    9a44:	00000206 	br	9a50 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9a48:	00bffb44 	movi	r2,-19
    9a4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9a50:	e0bffa17 	ldw	r2,-24(fp)
    9a54:	1000090e 	bge	r2,zero,9a7c <open+0x144>
  {
    alt_release_fd (index);  
    9a58:	e13ff917 	ldw	r4,-28(fp)
    9a5c:	0009a940 	call	9a94 <alt_release_fd>
    ALT_ERRNO = -status;
    9a60:	00098100 	call	9810 <alt_get_errno>
    9a64:	1007883a 	mov	r3,r2
    9a68:	e0bffa17 	ldw	r2,-24(fp)
    9a6c:	0085c83a 	sub	r2,zero,r2
    9a70:	18800015 	stw	r2,0(r3)
    return -1;
    9a74:	00bfffc4 	movi	r2,-1
    9a78:	00000106 	br	9a80 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9a7c:	e0bff917 	ldw	r2,-28(fp)
}
    9a80:	e037883a 	mov	sp,fp
    9a84:	dfc00117 	ldw	ra,4(sp)
    9a88:	df000017 	ldw	fp,0(sp)
    9a8c:	dec00204 	addi	sp,sp,8
    9a90:	f800283a 	ret

00009a94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9a94:	defffc04 	addi	sp,sp,-16
    9a98:	dfc00315 	stw	ra,12(sp)
    9a9c:	df000215 	stw	fp,8(sp)
    9aa0:	dc000115 	stw	r16,4(sp)
    9aa4:	df000204 	addi	fp,sp,8
    9aa8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9aac:	e0bffe17 	ldw	r2,-8(fp)
    9ab0:	108000d0 	cmplti	r2,r2,3
    9ab4:	1000111e 	bne	r2,zero,9afc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9ab8:	04000074 	movhi	r16,1
    9abc:	84290c04 	addi	r16,r16,-23504
    9ac0:	e0bffe17 	ldw	r2,-8(fp)
    9ac4:	01400304 	movi	r5,12
    9ac8:	1009883a 	mov	r4,r2
    9acc:	0008de40 	call	8de4 <__mulsi3>
    9ad0:	8085883a 	add	r2,r16,r2
    9ad4:	10800204 	addi	r2,r2,8
    9ad8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9adc:	04000074 	movhi	r16,1
    9ae0:	84290c04 	addi	r16,r16,-23504
    9ae4:	e0bffe17 	ldw	r2,-8(fp)
    9ae8:	01400304 	movi	r5,12
    9aec:	1009883a 	mov	r4,r2
    9af0:	0008de40 	call	8de4 <__mulsi3>
    9af4:	8085883a 	add	r2,r16,r2
    9af8:	10000015 	stw	zero,0(r2)
  }
}
    9afc:	0001883a 	nop
    9b00:	e6ffff04 	addi	sp,fp,-4
    9b04:	dfc00217 	ldw	ra,8(sp)
    9b08:	df000117 	ldw	fp,4(sp)
    9b0c:	dc000017 	ldw	r16,0(sp)
    9b10:	dec00304 	addi	sp,sp,12
    9b14:	f800283a 	ret

00009b18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9b18:	deffff04 	addi	sp,sp,-4
    9b1c:	df000015 	stw	fp,0(sp)
    9b20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9b24:	000170fa 	wrctl	ienable,zero
}
    9b28:	0001883a 	nop
    9b2c:	e037883a 	mov	sp,fp
    9b30:	df000017 	ldw	fp,0(sp)
    9b34:	dec00104 	addi	sp,sp,4
    9b38:	f800283a 	ret

00009b3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9b3c:	defffa04 	addi	sp,sp,-24
    9b40:	dfc00515 	stw	ra,20(sp)
    9b44:	df000415 	stw	fp,16(sp)
    9b48:	df000404 	addi	fp,sp,16
    9b4c:	e13ffe15 	stw	r4,-8(fp)
    9b50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9b54:	e0bfff17 	ldw	r2,-4(fp)
    9b58:	10800017 	ldw	r2,0(r2)
    9b5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9b60:	e13ffe17 	ldw	r4,-8(fp)
    9b64:	00085500 	call	8550 <strlen>
    9b68:	10800044 	addi	r2,r2,1
    9b6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9b70:	00000d06 	br	9ba8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9b74:	e0bffc17 	ldw	r2,-16(fp)
    9b78:	10800217 	ldw	r2,8(r2)
    9b7c:	e0fffd17 	ldw	r3,-12(fp)
    9b80:	180d883a 	mov	r6,r3
    9b84:	e17ffe17 	ldw	r5,-8(fp)
    9b88:	1009883a 	mov	r4,r2
    9b8c:	0009dcc0 	call	9dcc <memcmp>
    9b90:	1000021e 	bne	r2,zero,9b9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9b94:	e0bffc17 	ldw	r2,-16(fp)
    9b98:	00000706 	br	9bb8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9b9c:	e0bffc17 	ldw	r2,-16(fp)
    9ba0:	10800017 	ldw	r2,0(r2)
    9ba4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9ba8:	e0fffc17 	ldw	r3,-16(fp)
    9bac:	e0bfff17 	ldw	r2,-4(fp)
    9bb0:	18bff01e 	bne	r3,r2,9b74 <_gp+0xffff75c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9bb4:	0005883a 	mov	r2,zero
}
    9bb8:	e037883a 	mov	sp,fp
    9bbc:	dfc00117 	ldw	ra,4(sp)
    9bc0:	df000017 	ldw	fp,0(sp)
    9bc4:	dec00204 	addi	sp,sp,8
    9bc8:	f800283a 	ret

00009bcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9bcc:	defffb04 	addi	sp,sp,-20
    9bd0:	dfc00415 	stw	ra,16(sp)
    9bd4:	df000315 	stw	fp,12(sp)
    9bd8:	df000304 	addi	fp,sp,12
    9bdc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9be0:	d0a00217 	ldw	r2,-32760(gp)
    9be4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9be8:	00003106 	br	9cb0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9bec:	e0bffd17 	ldw	r2,-12(fp)
    9bf0:	10800217 	ldw	r2,8(r2)
    9bf4:	1009883a 	mov	r4,r2
    9bf8:	00085500 	call	8550 <strlen>
    9bfc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9c00:	e0bffd17 	ldw	r2,-12(fp)
    9c04:	10c00217 	ldw	r3,8(r2)
    9c08:	e0bffe17 	ldw	r2,-8(fp)
    9c0c:	10bfffc4 	addi	r2,r2,-1
    9c10:	1885883a 	add	r2,r3,r2
    9c14:	10800003 	ldbu	r2,0(r2)
    9c18:	10803fcc 	andi	r2,r2,255
    9c1c:	1080201c 	xori	r2,r2,128
    9c20:	10bfe004 	addi	r2,r2,-128
    9c24:	10800bd8 	cmpnei	r2,r2,47
    9c28:	1000031e 	bne	r2,zero,9c38 <alt_find_file+0x6c>
    {
      len -= 1;
    9c2c:	e0bffe17 	ldw	r2,-8(fp)
    9c30:	10bfffc4 	addi	r2,r2,-1
    9c34:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9c38:	e0bffe17 	ldw	r2,-8(fp)
    9c3c:	e0ffff17 	ldw	r3,-4(fp)
    9c40:	1885883a 	add	r2,r3,r2
    9c44:	10800003 	ldbu	r2,0(r2)
    9c48:	10803fcc 	andi	r2,r2,255
    9c4c:	1080201c 	xori	r2,r2,128
    9c50:	10bfe004 	addi	r2,r2,-128
    9c54:	10800be0 	cmpeqi	r2,r2,47
    9c58:	1000081e 	bne	r2,zero,9c7c <alt_find_file+0xb0>
    9c5c:	e0bffe17 	ldw	r2,-8(fp)
    9c60:	e0ffff17 	ldw	r3,-4(fp)
    9c64:	1885883a 	add	r2,r3,r2
    9c68:	10800003 	ldbu	r2,0(r2)
    9c6c:	10803fcc 	andi	r2,r2,255
    9c70:	1080201c 	xori	r2,r2,128
    9c74:	10bfe004 	addi	r2,r2,-128
    9c78:	10000a1e 	bne	r2,zero,9ca4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    9c7c:	e0bffd17 	ldw	r2,-12(fp)
    9c80:	10800217 	ldw	r2,8(r2)
    9c84:	e0fffe17 	ldw	r3,-8(fp)
    9c88:	180d883a 	mov	r6,r3
    9c8c:	e17fff17 	ldw	r5,-4(fp)
    9c90:	1009883a 	mov	r4,r2
    9c94:	0009dcc0 	call	9dcc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9c98:	1000021e 	bne	r2,zero,9ca4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9c9c:	e0bffd17 	ldw	r2,-12(fp)
    9ca0:	00000706 	br	9cc0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9ca4:	e0bffd17 	ldw	r2,-12(fp)
    9ca8:	10800017 	ldw	r2,0(r2)
    9cac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9cb0:	e0fffd17 	ldw	r3,-12(fp)
    9cb4:	d0a00204 	addi	r2,gp,-32760
    9cb8:	18bfcc1e 	bne	r3,r2,9bec <_gp+0xffff763c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9cbc:	0005883a 	mov	r2,zero
}
    9cc0:	e037883a 	mov	sp,fp
    9cc4:	dfc00117 	ldw	ra,4(sp)
    9cc8:	df000017 	ldw	fp,0(sp)
    9ccc:	dec00204 	addi	sp,sp,8
    9cd0:	f800283a 	ret

00009cd4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9cd4:	defffa04 	addi	sp,sp,-24
    9cd8:	dfc00515 	stw	ra,20(sp)
    9cdc:	df000415 	stw	fp,16(sp)
    9ce0:	dc000315 	stw	r16,12(sp)
    9ce4:	df000404 	addi	fp,sp,16
    9ce8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9cec:	00bffa04 	movi	r2,-24
    9cf0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9cf4:	e03ffc15 	stw	zero,-16(fp)
    9cf8:	00001d06 	br	9d70 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    9cfc:	04000074 	movhi	r16,1
    9d00:	84290c04 	addi	r16,r16,-23504
    9d04:	e0bffc17 	ldw	r2,-16(fp)
    9d08:	01400304 	movi	r5,12
    9d0c:	1009883a 	mov	r4,r2
    9d10:	0008de40 	call	8de4 <__mulsi3>
    9d14:	8085883a 	add	r2,r16,r2
    9d18:	10800017 	ldw	r2,0(r2)
    9d1c:	1000111e 	bne	r2,zero,9d64 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    9d20:	04000074 	movhi	r16,1
    9d24:	84290c04 	addi	r16,r16,-23504
    9d28:	e0bffc17 	ldw	r2,-16(fp)
    9d2c:	01400304 	movi	r5,12
    9d30:	1009883a 	mov	r4,r2
    9d34:	0008de40 	call	8de4 <__mulsi3>
    9d38:	8085883a 	add	r2,r16,r2
    9d3c:	e0fffe17 	ldw	r3,-8(fp)
    9d40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9d44:	d0e00617 	ldw	r3,-32744(gp)
    9d48:	e0bffc17 	ldw	r2,-16(fp)
    9d4c:	1880020e 	bge	r3,r2,9d58 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    9d50:	e0bffc17 	ldw	r2,-16(fp)
    9d54:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    9d58:	e0bffc17 	ldw	r2,-16(fp)
    9d5c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9d60:	00000606 	br	9d7c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9d64:	e0bffc17 	ldw	r2,-16(fp)
    9d68:	10800044 	addi	r2,r2,1
    9d6c:	e0bffc15 	stw	r2,-16(fp)
    9d70:	e0bffc17 	ldw	r2,-16(fp)
    9d74:	10800810 	cmplti	r2,r2,32
    9d78:	103fe01e 	bne	r2,zero,9cfc <_gp+0xffff774c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9d7c:	e0bffd17 	ldw	r2,-12(fp)
}
    9d80:	e6ffff04 	addi	sp,fp,-4
    9d84:	dfc00217 	ldw	ra,8(sp)
    9d88:	df000117 	ldw	fp,4(sp)
    9d8c:	dc000017 	ldw	r16,0(sp)
    9d90:	dec00304 	addi	sp,sp,12
    9d94:	f800283a 	ret

00009d98 <atexit>:
    9d98:	200b883a 	mov	r5,r4
    9d9c:	000f883a 	mov	r7,zero
    9da0:	000d883a 	mov	r6,zero
    9da4:	0009883a 	mov	r4,zero
    9da8:	0009dfc1 	jmpi	9dfc <__register_exitproc>

00009dac <exit>:
    9dac:	defffe04 	addi	sp,sp,-8
    9db0:	000b883a 	mov	r5,zero
    9db4:	dc000015 	stw	r16,0(sp)
    9db8:	dfc00115 	stw	ra,4(sp)
    9dbc:	2021883a 	mov	r16,r4
    9dc0:	0009f540 	call	9f54 <__call_exitprocs>
    9dc4:	8009883a 	mov	r4,r16
    9dc8:	000a0e40 	call	a0e4 <_exit>

00009dcc <memcmp>:
    9dcc:	218d883a 	add	r6,r4,r6
    9dd0:	21800826 	beq	r4,r6,9df4 <memcmp+0x28>
    9dd4:	20800003 	ldbu	r2,0(r4)
    9dd8:	28c00003 	ldbu	r3,0(r5)
    9ddc:	10c00226 	beq	r2,r3,9de8 <memcmp+0x1c>
    9de0:	10c5c83a 	sub	r2,r2,r3
    9de4:	f800283a 	ret
    9de8:	21000044 	addi	r4,r4,1
    9dec:	29400044 	addi	r5,r5,1
    9df0:	003ff706 	br	9dd0 <_gp+0xffff7820>
    9df4:	0005883a 	mov	r2,zero
    9df8:	f800283a 	ret

00009dfc <__register_exitproc>:
    9dfc:	00800074 	movhi	r2,1
    9e00:	10a96c04 	addi	r2,r2,-23120
    9e04:	10c00017 	ldw	r3,0(r2)
    9e08:	defff904 	addi	sp,sp,-28
    9e0c:	dc000015 	stw	r16,0(sp)
    9e10:	1c000c17 	ldw	r16,48(r3)
    9e14:	dd400515 	stw	r21,20(sp)
    9e18:	dd000415 	stw	r20,16(sp)
    9e1c:	dcc00315 	stw	r19,12(sp)
    9e20:	dc800215 	stw	r18,8(sp)
    9e24:	dc400115 	stw	r17,4(sp)
    9e28:	dfc00615 	stw	ra,24(sp)
    9e2c:	202b883a 	mov	r21,r4
    9e30:	2823883a 	mov	r17,r5
    9e34:	3027883a 	mov	r19,r6
    9e38:	3825883a 	mov	r18,r7
    9e3c:	1029883a 	mov	r20,r2
    9e40:	8000021e 	bne	r16,zero,9e4c <__register_exitproc+0x50>
    9e44:	1c000d04 	addi	r16,r3,52
    9e48:	1c000c15 	stw	r16,48(r3)
    9e4c:	80800117 	ldw	r2,4(r16)
    9e50:	00c007c4 	movi	r3,31
    9e54:	1880110e 	bge	r3,r2,9e9c <__register_exitproc+0xa0>
    9e58:	00800034 	movhi	r2,0
    9e5c:	10800004 	addi	r2,r2,0
    9e60:	1000021e 	bne	r2,zero,9e6c <__register_exitproc+0x70>
    9e64:	00bfffc4 	movi	r2,-1
    9e68:	00003106 	br	9f30 <__register_exitproc+0x134>
    9e6c:	01002304 	movi	r4,140
    9e70:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9e74:	1021883a 	mov	r16,r2
    9e78:	103ffa26 	beq	r2,zero,9e64 <_gp+0xffff78b4>
    9e7c:	10000115 	stw	zero,4(r2)
    9e80:	a0800017 	ldw	r2,0(r20)
    9e84:	10c00c17 	ldw	r3,48(r2)
    9e88:	80c00015 	stw	r3,0(r16)
    9e8c:	14000c15 	stw	r16,48(r2)
    9e90:	80002215 	stw	zero,136(r16)
    9e94:	a8001d26 	beq	r21,zero,9f0c <__register_exitproc+0x110>
    9e98:	00000606 	br	9eb4 <__register_exitproc+0xb8>
    9e9c:	a8001b26 	beq	r21,zero,9f0c <__register_exitproc+0x110>
    9ea0:	80802217 	ldw	r2,136(r16)
    9ea4:	1000091e 	bne	r2,zero,9ecc <__register_exitproc+0xd0>
    9ea8:	00800034 	movhi	r2,0
    9eac:	10800004 	addi	r2,r2,0
    9eb0:	103fec26 	beq	r2,zero,9e64 <_gp+0xffff78b4>
    9eb4:	01004204 	movi	r4,264
    9eb8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9ebc:	103fe926 	beq	r2,zero,9e64 <_gp+0xffff78b4>
    9ec0:	10004015 	stw	zero,256(r2)
    9ec4:	10004115 	stw	zero,260(r2)
    9ec8:	80802215 	stw	r2,136(r16)
    9ecc:	81400117 	ldw	r5,4(r16)
    9ed0:	01000044 	movi	r4,1
    9ed4:	2947883a 	add	r3,r5,r5
    9ed8:	18c7883a 	add	r3,r3,r3
    9edc:	10c7883a 	add	r3,r2,r3
    9ee0:	1cc00015 	stw	r19,0(r3)
    9ee4:	2148983a 	sll	r4,r4,r5
    9ee8:	11404017 	ldw	r5,256(r2)
    9eec:	290ab03a 	or	r5,r5,r4
    9ef0:	11404015 	stw	r5,256(r2)
    9ef4:	1c802015 	stw	r18,128(r3)
    9ef8:	00c00084 	movi	r3,2
    9efc:	a8c0031e 	bne	r21,r3,9f0c <__register_exitproc+0x110>
    9f00:	10c04117 	ldw	r3,260(r2)
    9f04:	1908b03a 	or	r4,r3,r4
    9f08:	11004115 	stw	r4,260(r2)
    9f0c:	80800117 	ldw	r2,4(r16)
    9f10:	10c00044 	addi	r3,r2,1
    9f14:	10800084 	addi	r2,r2,2
    9f18:	1085883a 	add	r2,r2,r2
    9f1c:	1085883a 	add	r2,r2,r2
    9f20:	80c00115 	stw	r3,4(r16)
    9f24:	80a1883a 	add	r16,r16,r2
    9f28:	84400015 	stw	r17,0(r16)
    9f2c:	0005883a 	mov	r2,zero
    9f30:	dfc00617 	ldw	ra,24(sp)
    9f34:	dd400517 	ldw	r21,20(sp)
    9f38:	dd000417 	ldw	r20,16(sp)
    9f3c:	dcc00317 	ldw	r19,12(sp)
    9f40:	dc800217 	ldw	r18,8(sp)
    9f44:	dc400117 	ldw	r17,4(sp)
    9f48:	dc000017 	ldw	r16,0(sp)
    9f4c:	dec00704 	addi	sp,sp,28
    9f50:	f800283a 	ret

00009f54 <__call_exitprocs>:
    9f54:	defff504 	addi	sp,sp,-44
    9f58:	dd000515 	stw	r20,20(sp)
    9f5c:	05000074 	movhi	r20,1
    9f60:	dc800315 	stw	r18,12(sp)
    9f64:	dfc00a15 	stw	ra,40(sp)
    9f68:	df000915 	stw	fp,36(sp)
    9f6c:	ddc00815 	stw	r23,32(sp)
    9f70:	dd800715 	stw	r22,28(sp)
    9f74:	dd400615 	stw	r21,24(sp)
    9f78:	dcc00415 	stw	r19,16(sp)
    9f7c:	dc400215 	stw	r17,8(sp)
    9f80:	dc000115 	stw	r16,4(sp)
    9f84:	d9000015 	stw	r4,0(sp)
    9f88:	2825883a 	mov	r18,r5
    9f8c:	a5296c04 	addi	r20,r20,-23120
    9f90:	a4400017 	ldw	r17,0(r20)
    9f94:	8cc00c17 	ldw	r19,48(r17)
    9f98:	8c400c04 	addi	r17,r17,48
    9f9c:	98004526 	beq	r19,zero,a0b4 <__call_exitprocs+0x160>
    9fa0:	9c000117 	ldw	r16,4(r19)
    9fa4:	00900034 	movhi	r2,16384
    9fa8:	10bfffc4 	addi	r2,r2,-1
    9fac:	9d402217 	ldw	r21,136(r19)
    9fb0:	85bfffc4 	addi	r22,r16,-1
    9fb4:	80a1883a 	add	r16,r16,r2
    9fb8:	8421883a 	add	r16,r16,r16
    9fbc:	8421883a 	add	r16,r16,r16
    9fc0:	ac2f883a 	add	r23,r21,r16
    9fc4:	84000204 	addi	r16,r16,8
    9fc8:	9c21883a 	add	r16,r19,r16
    9fcc:	b0002716 	blt	r22,zero,a06c <__call_exitprocs+0x118>
    9fd0:	90000726 	beq	r18,zero,9ff0 <__call_exitprocs+0x9c>
    9fd4:	a800041e 	bne	r21,zero,9fe8 <__call_exitprocs+0x94>
    9fd8:	b5bfffc4 	addi	r22,r22,-1
    9fdc:	bdffff04 	addi	r23,r23,-4
    9fe0:	843fff04 	addi	r16,r16,-4
    9fe4:	003ff906 	br	9fcc <_gp+0xffff7a1c>
    9fe8:	b9002017 	ldw	r4,128(r23)
    9fec:	913ffa1e 	bne	r18,r4,9fd8 <_gp+0xffff7a28>
    9ff0:	99000117 	ldw	r4,4(r19)
    9ff4:	82000017 	ldw	r8,0(r16)
    9ff8:	213fffc4 	addi	r4,r4,-1
    9ffc:	b100021e 	bne	r22,r4,a008 <__call_exitprocs+0xb4>
    a000:	9d800115 	stw	r22,4(r19)
    a004:	00000106 	br	a00c <__call_exitprocs+0xb8>
    a008:	80000015 	stw	zero,0(r16)
    a00c:	403ff226 	beq	r8,zero,9fd8 <_gp+0xffff7a28>
    a010:	9f000117 	ldw	fp,4(r19)
    a014:	a8000526 	beq	r21,zero,a02c <__call_exitprocs+0xd8>
    a018:	00800044 	movi	r2,1
    a01c:	1592983a 	sll	r9,r2,r22
    a020:	a9404017 	ldw	r5,256(r21)
    a024:	494a703a 	and	r5,r9,r5
    a028:	2800021e 	bne	r5,zero,a034 <__call_exitprocs+0xe0>
    a02c:	403ee83a 	callr	r8
    a030:	00000906 	br	a058 <__call_exitprocs+0x104>
    a034:	a9004117 	ldw	r4,260(r21)
    a038:	4908703a 	and	r4,r9,r4
    a03c:	2000041e 	bne	r4,zero,a050 <__call_exitprocs+0xfc>
    a040:	b9400017 	ldw	r5,0(r23)
    a044:	d9000017 	ldw	r4,0(sp)
    a048:	403ee83a 	callr	r8
    a04c:	00000206 	br	a058 <__call_exitprocs+0x104>
    a050:	b9000017 	ldw	r4,0(r23)
    a054:	403ee83a 	callr	r8
    a058:	99000117 	ldw	r4,4(r19)
    a05c:	e13fcc1e 	bne	fp,r4,9f90 <_gp+0xffff79e0>
    a060:	89000017 	ldw	r4,0(r17)
    a064:	993fdc26 	beq	r19,r4,9fd8 <_gp+0xffff7a28>
    a068:	003fc906 	br	9f90 <_gp+0xffff79e0>
    a06c:	00800034 	movhi	r2,0
    a070:	10800004 	addi	r2,r2,0
    a074:	10000f26 	beq	r2,zero,a0b4 <__call_exitprocs+0x160>
    a078:	99400117 	ldw	r5,4(r19)
    a07c:	99000017 	ldw	r4,0(r19)
    a080:	2800091e 	bne	r5,zero,a0a8 <__call_exitprocs+0x154>
    a084:	20000826 	beq	r4,zero,a0a8 <__call_exitprocs+0x154>
    a088:	89000015 	stw	r4,0(r17)
    a08c:	a8000226 	beq	r21,zero,a098 <__call_exitprocs+0x144>
    a090:	a809883a 	mov	r4,r21
    a094:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a098:	9809883a 	mov	r4,r19
    a09c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a0a0:	8cc00017 	ldw	r19,0(r17)
    a0a4:	003fbd06 	br	9f9c <_gp+0xffff79ec>
    a0a8:	9823883a 	mov	r17,r19
    a0ac:	2027883a 	mov	r19,r4
    a0b0:	003fba06 	br	9f9c <_gp+0xffff79ec>
    a0b4:	dfc00a17 	ldw	ra,40(sp)
    a0b8:	df000917 	ldw	fp,36(sp)
    a0bc:	ddc00817 	ldw	r23,32(sp)
    a0c0:	dd800717 	ldw	r22,28(sp)
    a0c4:	dd400617 	ldw	r21,24(sp)
    a0c8:	dd000517 	ldw	r20,20(sp)
    a0cc:	dcc00417 	ldw	r19,16(sp)
    a0d0:	dc800317 	ldw	r18,12(sp)
    a0d4:	dc400217 	ldw	r17,8(sp)
    a0d8:	dc000117 	ldw	r16,4(sp)
    a0dc:	dec00b04 	addi	sp,sp,44
    a0e0:	f800283a 	ret

0000a0e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a0e4:	defffd04 	addi	sp,sp,-12
    a0e8:	df000215 	stw	fp,8(sp)
    a0ec:	df000204 	addi	fp,sp,8
    a0f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a0f4:	0001883a 	nop
    a0f8:	e0bfff17 	ldw	r2,-4(fp)
    a0fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a100:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a104:	10000226 	beq	r2,zero,a110 <_exit+0x2c>
    ALT_SIM_FAIL();
    a108:	002af070 	cmpltui	zero,zero,43969
    a10c:	00000106 	br	a114 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a110:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a114:	003fff06 	br	a114 <_gp+0xffff7b64>
